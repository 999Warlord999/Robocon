
Speed_Position_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a30  08005a30  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08005a30  08005a30  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a30  08005a30  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001148  20000024  08005a5c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000116c  08005a5c  0002116c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffba  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002941  00000000  00000000  00030007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00033a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3e  00000000  00000000  00034a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c9  00000000  00000000  0004d95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919db  00000000  00000000  0005eb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  000f0554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	08005998 	.word	0x08005998

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	08005998 	.word	0x08005998

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <vApplicationGetIdleTaskMemory+0x28>)
 8000fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000040 	.word	0x20000040
 8000fd0:	20000094 	.word	0x20000094

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 ff43 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f84f 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f000 f98b 	bl	80012fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fe6:	f000 f891 	bl	800110c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fea:	f000 f90f 	bl	800120c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 f95b 	bl	80012a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	481a      	ldr	r0, [pc, #104]	; (8001060 <main+0x8c>)
 8000ff6:	f002 f807 	bl	8003008 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <main+0x8c>)
 8000ffe:	f002 f803 	bl	8003008 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0x90>)
 8001004:	f001 ff56 	bl	8002eb4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, data_RX, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	4917      	ldr	r1, [pc, #92]	; (8001068 <main+0x94>)
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <main+0x98>)
 800100e:	f002 feac 	bl	8003d6a <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_speed */
  osThreadDef(Task_speed, Start_task_speed, osPriorityNormal, 0, 128);
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <main+0x9c>)
 8001014:	f107 041c 	add.w	r4, r7, #28
 8001018:	461d      	mov	r5, r3
 800101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_speedHandle = osThreadCreate(osThread(Task_speed), NULL);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fac9 	bl	80045c4 <osThreadCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <main+0xa0>)
 8001036:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_pos */
  osThreadDef(Task_pos, Start_task_pos, osPriorityNormal, 0, 128);
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <main+0xa4>)
 800103a:	463c      	mov	r4, r7
 800103c:	461d      	mov	r5, r3
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_posHandle = osThreadCreate(osThread(Task_pos), NULL);
 800104a:	463b      	mov	r3, r7
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fab8 	bl	80045c4 <osThreadCreate>
 8001054:	4603      	mov	r3, r0
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <main+0xa8>)
 8001058:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800105a:	f003 faac 	bl	80045b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105e:	e7fe      	b.n	800105e <main+0x8a>
 8001060:	200002f8 	.word	0x200002f8
 8001064:	20000340 	.word	0x20000340
 8001068:	200002cc 	.word	0x200002cc
 800106c:	20000388 	.word	0x20000388
 8001070:	080059c8 	.word	0x080059c8
 8001074:	200003cc 	.word	0x200003cc
 8001078:	080059e4 	.word	0x080059e4
 800107c:	200003d0 	.word	0x200003d0

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fc7a 	bl	8005988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa59 	bl	8002580 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010d4:	f000 fce0 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fcc6 	bl	8002a84 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010fe:	f000 fccb 	bl	8001a98 <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3740      	adds	r7, #64	; 0x40
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <MX_TIM2_Init+0xfc>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001146:	2247      	movs	r2, #71	; 0x47
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <MX_TIM2_Init+0xfc>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001152:	2263      	movs	r2, #99	; 0x63
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_TIM2_Init+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001164:	f001 fe56 	bl	8002e14 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800116e:	f000 fc93 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	4822      	ldr	r0, [pc, #136]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001180:	f002 f9aa 	bl	80034d8 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800118a:	f000 fc85 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118e:	481e      	ldr	r0, [pc, #120]	; (8001208 <MX_TIM2_Init+0xfc>)
 8001190:	f001 fee2 	bl	8002f58 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800119a:	f000 fc7d 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_TIM2_Init+0xfc>)
 80011ae:	f002 fd1f 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80011b8:	f000 fc6e 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2208      	movs	r2, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0xfc>)
 80011d4:	f002 f8c2 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80011de:	f000 fc5b 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	220c      	movs	r2, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM2_Init+0xfc>)
 80011ea:	f002 f8b7 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80011f4:	f000 fc50 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM2_Init+0xfc>)
 80011fa:	f000 fcc3 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002f8 	.word	0x200002f8

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_TIM3_Init+0x94>)
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_TIM3_Init+0x98>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001230:	2247      	movs	r2, #71	; 0x47
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM3_Init+0x94>)
 800123c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM3_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001250:	f001 fde0 	bl	8002e14 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800125a:	f000 fc1d 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM3_Init+0x94>)
 800126c:	f002 f934 	bl	80034d8 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 fc0f 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001288:	f002 fcb2 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001292:	f000 fc01 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000340 	.word	0x20000340
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART1_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART1_UART_Init+0x4c>)
 80012e0:	f002 fcf6 	bl	8003cd0 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 fbd5 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000388 	.word	0x20000388
 80012f8:	40013800 	.word	0x40013800

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b48      	ldr	r3, [pc, #288]	; (8001434 <MX_GPIO_Init+0x138>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a47      	ldr	r2, [pc, #284]	; (8001434 <MX_GPIO_Init+0x138>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <MX_GPIO_Init+0x138>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <MX_GPIO_Init+0x138>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a41      	ldr	r2, [pc, #260]	; (8001434 <MX_GPIO_Init+0x138>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <MX_GPIO_Init+0x138>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <MX_GPIO_Init+0x138>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <MX_GPIO_Init+0x138>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <MX_GPIO_Init+0x138>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b36      	ldr	r3, [pc, #216]	; (8001434 <MX_GPIO_Init+0x138>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a35      	ldr	r2, [pc, #212]	; (8001434 <MX_GPIO_Init+0x138>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <MX_GPIO_Init+0x138>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001376:	4830      	ldr	r0, [pc, #192]	; (8001438 <MX_GPIO_Init+0x13c>)
 8001378:	f001 f8d1 	bl	800251e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2130      	movs	r1, #48	; 0x30
 8001380:	482e      	ldr	r0, [pc, #184]	; (800143c <MX_GPIO_Init+0x140>)
 8001382:	f001 f8cc 	bl	800251e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <MX_GPIO_Init+0x13c>)
 80013a0:	f000 ff22 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin|STEP_Pin;
 80013a4:	2330      	movs	r3, #48	; 0x30
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4820      	ldr	r0, [pc, #128]	; (800143c <MX_GPIO_Init+0x140>)
 80013bc:	f000 ff14 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_STP1_Pin */
  GPIO_InitStruct.Pin = ENC_STP1_Pin;
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_STP1_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <MX_GPIO_Init+0x140>)
 80013d4:	f000 ff08 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_STP2_Pin ENC_DC1_Pin */
  GPIO_InitStruct.Pin = ENC_STP2_Pin|ENC_DC1_Pin;
 80013d8:	2303      	movs	r3, #3
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_GPIO_Init+0x144>)
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4816      	ldr	r0, [pc, #88]	; (8001444 <MX_GPIO_Init+0x148>)
 80013ec:	f000 fefc 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC2_Pin */
  GPIO_InitStruct.Pin = ENC_DC2_Pin;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC2_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <MX_GPIO_Init+0x148>)
 8001406:	f000 feef 	bl	80021e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2105      	movs	r1, #5
 800140e:	2006      	movs	r0, #6
 8001410:	f000 fe0f 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001414:	2006      	movs	r0, #6
 8001416:	f000 fe28 	bl	800206a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2105      	movs	r1, #5
 800141e:	2007      	movs	r0, #7
 8001420:	f000 fe07 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001424:	2007      	movs	r0, #7
 8001426:	f000 fe20 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40011000 	.word	0x40011000
 800143c:	40010800 	.word	0x40010800
 8001440:	10110000 	.word	0x10110000
 8001444:	40010c00 	.word	0x40010c00

08001448 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, data_RX, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	4904      	ldr	r1, [pc, #16]	; (8001464 <HAL_UART_RxCpltCallback+0x1c>)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <HAL_UART_RxCpltCallback+0x20>)
 8001456:	f002 fc88 	bl	8003d6a <HAL_UART_Receive_IT>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002cc 	.word	0x200002cc
 8001468:	20000388 	.word	0x20000388

0800146c <Drive>:
void Drive(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	c = data_RX[0];
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <Drive+0xb0>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <Drive+0xb4>)
 8001476:	701a      	strb	r2, [r3, #0]
		switch(c){
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <Drive+0xb4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b63      	cmp	r3, #99	; 0x63
 800147e:	d00e      	beq.n	800149e <Drive+0x32>
 8001480:	2b63      	cmp	r3, #99	; 0x63
 8001482:	dc0f      	bgt.n	80014a4 <Drive+0x38>
 8001484:	2b61      	cmp	r3, #97	; 0x61
 8001486:	d002      	beq.n	800148e <Drive+0x22>
 8001488:	2b62      	cmp	r3, #98	; 0x62
 800148a:	d004      	beq.n	8001496 <Drive+0x2a>
			t = 20;
			break;
		case 'c':
			t = 40;
		default:
			break;
 800148c:	e00a      	b.n	80014a4 <Drive+0x38>
			t = 0;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <Drive+0xb8>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
			break;
 8001494:	e007      	b.n	80014a6 <Drive+0x3a>
			t = 20;
 8001496:	4b23      	ldr	r3, [pc, #140]	; (8001524 <Drive+0xb8>)
 8001498:	2214      	movs	r2, #20
 800149a:	601a      	str	r2, [r3, #0]
			break;
 800149c:	e003      	b.n	80014a6 <Drive+0x3a>
			t = 40;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <Drive+0xb8>)
 80014a0:	2228      	movs	r2, #40	; 0x28
 80014a2:	601a      	str	r2, [r3, #0]
			break;
 80014a4:	bf00      	nop
		}
	if (u2>0){
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <Drive+0xbc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dd05      	ble.n	80014ba <Drive+0x4e>
		HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, 1);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <Drive+0xc0>)
 80014b4:	f001 f833 	bl	800251e <HAL_GPIO_WritePin>
 80014b8:	e008      	b.n	80014cc <Drive+0x60>
	}
	else if (u2<0){
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <Drive+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da04      	bge.n	80014cc <Drive+0x60>
		HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2110      	movs	r1, #16
 80014c6:	4819      	ldr	r0, [pc, #100]	; (800152c <Drive+0xc0>)
 80014c8:	f001 f829 	bl	800251e <HAL_GPIO_WritePin>
	}
	if(u2!=0){
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <Drive+0xbc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <Drive+0x8a>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2120      	movs	r1, #32
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <Drive+0xc0>)
 80014da:	f001 f820 	bl	800251e <HAL_GPIO_WritePin>
		osDelay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f003 f8bc 	bl	800465c <osDelay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <Drive+0xc0>)
 80014ea:	f001 f818 	bl	800251e <HAL_GPIO_WritePin>
		osDelay(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f003 f8b4 	bl	800465c <osDelay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
		osDelay(1);
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
		osDelay(1);
	}
}
 80014f4:	e00f      	b.n	8001516 <Drive+0xaa>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2120      	movs	r1, #32
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <Drive+0xc0>)
 80014fc:	f001 f80f 	bl	800251e <HAL_GPIO_WritePin>
		osDelay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f003 f8ab 	bl	800465c <osDelay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <Drive+0xc0>)
 800150c:	f001 f807 	bl	800251e <HAL_GPIO_WritePin>
		osDelay(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f003 f8a3 	bl	800465c <osDelay>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002cc 	.word	0x200002cc
 8001520:	200002d6 	.word	0x200002d6
 8001524:	200002ec 	.word	0x200002ec
 8001528:	200002d8 	.word	0x200002d8
 800152c:	40010800 	.word	0x40010800

08001530 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_DC1_Pin){
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d112      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(ENC_DC2_GPIO_Port,ENC_DC2_Pin) == 0) count1++;
 8001540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001544:	481a      	ldr	r0, [pc, #104]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8001546:	f000 ffd3 	bl	80024f0 <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d105      	bne.n	800155c <HAL_GPIO_EXTI_Callback+0x2c>
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e004      	b.n	8001566 <HAL_GPIO_EXTI_Callback+0x36>
		else count1--;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001564:	6013      	str	r3, [r2, #0]
	}
	if (count1 > 12 || count1 < -12) count1 = 0;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	dc04      	bgt.n	8001578 <HAL_GPIO_EXTI_Callback+0x48>
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f113 0f0c 	cmn.w	r3, #12
 8001576:	da02      	bge.n	800157e <HAL_GPIO_EXTI_Callback+0x4e>
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x84>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

	if (GPIO_Pin == ENC_STP2_Pin){
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d111      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x78>
		if (HAL_GPIO_ReadPin(ENC_STP1_GPIO_Port,ENC_STP1_Pin) == 0) count2++;
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001588:	f000 ffb2 	bl	80024f0 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_GPIO_EXTI_Callback+0x6e>
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_GPIO_EXTI_Callback+0x8c>)
 800159a:	6013      	str	r3, [r2, #0]
		else count2--;
	}
}
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_EXTI_Callback+0x78>
		else count2--;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_GPIO_EXTI_Callback+0x8c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <HAL_GPIO_EXTI_Callback+0x8c>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	20000294 	.word	0x20000294
 80015b8:	40010800 	.word	0x40010800
 80015bc:	200002f4 	.word	0x200002f4

080015c0 <setMotor>:
void setMotor(int dir , int pwmVal){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d108      	bne.n	80015e4 <setMotor+0x24>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmVal);
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <setMotor+0x58>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <setMotor+0x58>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	}
}
 80015e2:	e013      	b.n	800160c <setMotor+0x4c>
	else if (dir == 1){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <setMotor+0x3c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <setMotor+0x58>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmVal);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <setMotor+0x58>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015fa:	e007      	b.n	800160c <setMotor+0x4c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <setMotor+0x58>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <setMotor+0x58>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200002f8 	.word	0x200002f8
 800161c:	00000000 	.word	0x00000000

08001620 <PID_SPEED>:
void PID_SPEED ()
{	c = data_RX[0];
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	af00      	add	r7, sp, #0
 8001624:	4b44      	ldr	r3, [pc, #272]	; (8001738 <PID_SPEED+0x118>)
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <PID_SPEED+0x11c>)
 800162a:	701a      	strb	r2, [r3, #0]
	switch(c){
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <PID_SPEED+0x11c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b32      	cmp	r3, #50	; 0x32
 8001632:	d009      	beq.n	8001648 <PID_SPEED+0x28>
 8001634:	2b32      	cmp	r3, #50	; 0x32
 8001636:	dc0e      	bgt.n	8001656 <PID_SPEED+0x36>
 8001638:	2b30      	cmp	r3, #48	; 0x30
 800163a:	d009      	beq.n	8001650 <PID_SPEED+0x30>
 800163c:	2b31      	cmp	r3, #49	; 0x31
 800163e:	d10a      	bne.n	8001656 <PID_SPEED+0x36>
	case '1':
		vt = 100;
 8001640:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <PID_SPEED+0x120>)
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	601a      	str	r2, [r3, #0]
		break;
 8001646:	e007      	b.n	8001658 <PID_SPEED+0x38>
	case '2':
		vt = 50;
 8001648:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <PID_SPEED+0x120>)
 800164a:	2232      	movs	r2, #50	; 0x32
 800164c:	601a      	str	r2, [r3, #0]
		break;
 800164e:	e003      	b.n	8001658 <PID_SPEED+0x38>
	case '0':
		vt = 0;
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <PID_SPEED+0x120>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
	default:
		break;
 8001656:	bf00      	nop
	}
	e1 = vt - v1Filt;
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <PID_SPEED+0x120>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fad7 	bl	8000c10 <__aeabi_i2f>
 8001662:	4602      	mov	r2, r0
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <PID_SPEED+0x124>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	4610      	mov	r0, r2
 800166c:	f7ff fa1a 	bl	8000aa4 <__aeabi_fsub>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <PID_SPEED+0x128>)
 8001676:	601a      	str	r2, [r3, #0]
	ei1 += e1 * 0.001;
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <PID_SPEED+0x12c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fecb 	bl	8000418 <__aeabi_f2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <PID_SPEED+0x128>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fec4 	bl	8000418 <__aeabi_f2d>
 8001690:	a327      	add	r3, pc, #156	; (adr r3, 8001730 <PID_SPEED+0x110>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff17 	bl	80004c8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe fd5b 	bl	800015c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9a5 	bl	80009fc <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <PID_SPEED+0x12c>)
 80016b6:	6013      	str	r3, [r2, #0]
	u1 = kp1 * e1 + ki1 * ei1;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <PID_SPEED+0x130>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a22      	ldr	r2, [pc, #136]	; (8001748 <PID_SPEED+0x128>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff faf8 	bl	8000cb8 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461c      	mov	r4, r3
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <PID_SPEED+0x134>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1e      	ldr	r2, [pc, #120]	; (800174c <PID_SPEED+0x12c>)
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff faee 	bl	8000cb8 <__aeabi_fmul>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff f9e1 	bl	8000aa8 <__addsf3>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fc35 	bl	8000f58 <__aeabi_f2iz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <PID_SPEED+0x138>)
 80016f2:	6013      	str	r3, [r2, #0]

	if(u1 < 0) dir = 1;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <PID_SPEED+0x138>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da03      	bge.n	8001704 <PID_SPEED+0xe4>
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <PID_SPEED+0x13c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e003      	b.n	800170c <PID_SPEED+0xec>
	else dir = -1;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <PID_SPEED+0x13c>)
 8001706:	f04f 32ff 	mov.w	r2, #4294967295
 800170a:	601a      	str	r2, [r3, #0]
	pwr = abs(u1);
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <PID_SPEED+0x138>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	bfb8      	it	lt
 8001714:	425b      	neglt	r3, r3
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <PID_SPEED+0x140>)
 8001718:	6013      	str	r3, [r2, #0]
	if(pwr > 100) pwr = 100;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <PID_SPEED+0x140>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	dd02      	ble.n	8001728 <PID_SPEED+0x108>
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <PID_SPEED+0x140>)
 8001724:	2264      	movs	r2, #100	; 0x64
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	200002cc 	.word	0x200002cc
 800173c:	200002d6 	.word	0x200002d6
 8001740:	200002b4 	.word	0x200002b4
 8001744:	200002ac 	.word	0x200002ac
 8001748:	200002b8 	.word	0x200002b8
 800174c:	200002bc 	.word	0x200002bc
 8001750:	20000004 	.word	0x20000004
 8001754:	20000008 	.word	0x20000008
 8001758:	200002c0 	.word	0x200002c0
 800175c:	200002c4 	.word	0x200002c4
 8001760:	200002c8 	.word	0x200002c8

08001764 <Start_task_speed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_task_speed */
void Start_task_speed(void const * argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  PID_SPEED();
 800176c:	f7ff ff58 	bl	8001620 <PID_SPEED>
	  setMotor(dir, pwr);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <Start_task_speed+0x20>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <Start_task_speed+0x24>)
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff20 	bl	80015c0 <setMotor>
	  PID_SPEED();
 8001780:	e7f4      	b.n	800176c <Start_task_speed+0x8>
 8001782:	bf00      	nop
 8001784:	200002c4 	.word	0x200002c4
 8001788:	200002c8 	.word	0x200002c8

0800178c <Start_task_pos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_task_pos */
void Start_task_pos(void const * argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_task_pos */
  /* Infinite loop */
  for(;;)
  {
    Drive();
 8001794:	f7ff fe6a 	bl	800146c <Drive>
 8001798:	e7fc      	b.n	8001794 <Start_task_pos+0x8>
 800179a:	0000      	movs	r0, r0
 800179c:	0000      	movs	r0, r0
	...

080017a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4aa2      	ldr	r2, [pc, #648]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b2:	f000 fb6d 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	counter = count1;
 80017b6:	4ba1      	ldr	r3, [pc, #644]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4aa1      	ldr	r2, [pc, #644]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017bc:	6013      	str	r3, [r2, #0]
	pos1 = counter - precount;
 80017be:	4ba0      	ldr	r3, [pc, #640]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4ba0      	ldr	r3, [pc, #640]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017ca:	6013      	str	r3, [r2, #0]
	if (dir == -1 && pos1 < -6.5) pos1 += N;
 80017cc:	4b9f      	ldr	r3, [pc, #636]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d117      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x66>
 80017d6:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f113 0f06 	cmn.w	r3, #6
 80017de:	da12      	bge.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x66>
 80017e0:	4b99      	ldr	r3, [pc, #612]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa13 	bl	8000c10 <__aeabi_i2f>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b98      	ldr	r3, [pc, #608]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f7ff f958 	bl	8000aa8 <__addsf3>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fbac 	bl	8000f58 <__aeabi_f2iz>
 8001800:	4603      	mov	r3, r0
 8001802:	4a91      	ldr	r2, [pc, #580]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001804:	6013      	str	r3, [r2, #0]
	if (dir == 1 && pos1 > 6.5) pos1 -= N;
 8001806:	4b91      	ldr	r3, [pc, #580]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d116      	bne.n	800183c <HAL_TIM_PeriodElapsedCallback+0x9c>
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b06      	cmp	r3, #6
 8001814:	dd12      	ble.n	800183c <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f9f8 	bl	8000c10 <__aeabi_i2f>
 8001820:	4602      	mov	r2, r0
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb91 	bl	8000f58 <__aeabi_f2iz>
 8001836:	4603      	mov	r3, r0
 8001838:	4a83      	ldr	r2, [pc, #524]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800183a:	6013      	str	r3, [r2, #0]
	veloc = pos1 / 0.001;
 800183c:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fdd7 	bl	80003f4 <__aeabi_i2d>
 8001846:	a374      	add	r3, pc, #464	; (adr r3, 8001a18 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe ff66 	bl	800071c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f8d0 	bl	80009fc <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001860:	6013      	str	r3, [r2, #0]
	v1 = veloc / (650) * 60;
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	497c      	ldr	r1, [pc, #496]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fad9 	bl	8000e20 <__aeabi_fdiv>
 800186e:	4603      	mov	r3, r0
 8001870:	497a      	ldr	r1, [pc, #488]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa20 	bl	8000cb8 <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800187e:	601a      	str	r2, [r3, #0]
	v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;
 8001880:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdc7 	bl	8000418 <__aeabi_f2d>
 800188a:	a365      	add	r3, pc, #404	; (adr r3, 8001a20 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fe1a 	bl	80004c8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdb9 	bl	8000418 <__aeabi_f2d>
 80018a6:	a360      	add	r3, pc, #384	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe0c 	bl	80004c8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fc50 	bl	800015c <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fda5 	bl	8000418 <__aeabi_f2d>
 80018ce:	a356      	add	r3, pc, #344	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fdf8 	bl	80004c8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc3c 	bl	800015c <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f886 	bl	80009fc <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a5c      	ldr	r2, [pc, #368]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80018f4:	6013      	str	r3, [r2, #0]
	v1Prev = v1;
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018fc:	6013      	str	r3, [r2, #0]
	precount = counter;
 80018fe:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a50      	ldr	r2, [pc, #320]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001904:	6013      	str	r3, [r2, #0]

	e2 = t - count2;
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001912:	6013      	str	r3, [r2, #0]
	ei2 += e2*0.001;
 8001914:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd7d 	bl	8000418 <__aeabi_f2d>
 800191e:	4604      	mov	r4, r0
 8001920:	460d      	mov	r5, r1
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd64 	bl	80003f4 <__aeabi_i2d>
 800192c:	a33a      	add	r3, pc, #232	; (adr r3, 8001a18 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fdc9 	bl	80004c8 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe fc0d 	bl	800015c <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f857 	bl	80009fc <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001952:	6013      	str	r3, [r2, #0]
	ed2 = (e2-pre_e2)/0.001;
 8001954:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd48 	bl	80003f4 <__aeabi_i2d>
 8001964:	a32c      	add	r3, pc, #176	; (adr r3, 8001a18 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fed7 	bl	800071c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f841 	bl	80009fc <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800197e:	6013      	str	r3, [r2, #0]
	if (ei2>0.09){
 8001980:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd47 	bl	8000418 <__aeabi_f2d>
 800198a:	a329      	add	r3, pc, #164	; (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7ff f82a 	bl	80009e8 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x200>
		ei2 = 0.09;
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800199c:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800199e:	601a      	str	r2, [r3, #0]
	}
	u2 = kp2*e2 + ki2*ei2 + kd2*ed2;
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f933 	bl	8000c10 <__aeabi_i2f>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff f980 	bl	8000cb8 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461c      	mov	r4, r3
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f976 	bl	8000cb8 <__aeabi_fmul>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff f869 	bl	8000aa8 <__addsf3>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f967 	bl	8000cb8 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff f85a 	bl	8000aa8 <__addsf3>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff faae 	bl	8000f58 <__aeabi_f2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a00:	6013      	str	r3, [r2, #0]
	pre_e2 = e2;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* USER CODE END Callback 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a1c:	3f50624d 	.word	0x3f50624d
 8001a20:	ced91687 	.word	0xced91687
 8001a24:	3feb53f7 	.word	0x3feb53f7
 8001a28:	532617c2 	.word	0x532617c2
 8001a2c:	3fb2a305 	.word	0x3fb2a305
 8001a30:	70a3d70a 	.word	0x70a3d70a
 8001a34:	3fb70a3d 	.word	0x3fb70a3d
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	20000294 	.word	0x20000294
 8001a40:	20000298 	.word	0x20000298
 8001a44:	200002a0 	.word	0x200002a0
 8001a48:	2000029c 	.word	0x2000029c
 8001a4c:	200002c4 	.word	0x200002c4
 8001a50:	20000000 	.word	0x20000000
 8001a54:	200002a4 	.word	0x200002a4
 8001a58:	44228000 	.word	0x44228000
 8001a5c:	42700000 	.word	0x42700000
 8001a60:	200002a8 	.word	0x200002a8
 8001a64:	200002ac 	.word	0x200002ac
 8001a68:	200002b0 	.word	0x200002b0
 8001a6c:	200002ec 	.word	0x200002ec
 8001a70:	200002f4 	.word	0x200002f4
 8001a74:	200002dc 	.word	0x200002dc
 8001a78:	200002e4 	.word	0x200002e4
 8001a7c:	200002e0 	.word	0x200002e0
 8001a80:	200002e8 	.word	0x200002e8
 8001a84:	3db851ec 	.word	0x3db851ec
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	200002f0 	.word	0x200002f0
 8001a94:	200002d8 	.word	0x200002d8

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_MspInit+0x68>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_MspInit+0x68>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_MspInit+0x68>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_MspInit+0x68>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_MspInit+0x68>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_MspInit+0x68>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	210f      	movs	r1, #15
 8001ade:	f06f 0001 	mvn.w	r0, #1
 8001ae2:	f000 faa6 	bl	8002032 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_MspInit+0x6c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_MspInit+0x6c>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000

08001b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d10c      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3e:	e018      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_TIM_Base_MspInit+0x6c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d113      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_TIM_Base_MspInit+0x68>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2105      	movs	r1, #5
 8001b66:	201d      	movs	r0, #29
 8001b68:	f000 fa63 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b6c:	201d      	movs	r0, #29
 8001b6e:	f000 fa7c 	bl	800206a <HAL_NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40000400 	.word	0x40000400

08001b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba2:	d117      	bne.n	8001bd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_TIM_MspPostInit+0x58>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_TIM_MspPostInit+0x58>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_TIM_MspPostInit+0x58>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4804      	ldr	r0, [pc, #16]	; (8001be0 <HAL_TIM_MspPostInit+0x5c>)
 8001bd0:	f000 fb0a 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010800 	.word	0x40010800

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_UART_MspInit+0x9c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d139      	bne.n	8001c78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_UART_MspInit+0xa0>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4619      	mov	r1, r3
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <HAL_UART_MspInit+0xa4>)
 8001c4a:	f000 facd 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_UART_MspInit+0xa4>)
 8001c64:	f000 fac0 	bl	80021e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	2025      	movs	r0, #37	; 0x25
 8001c6e:	f000 f9e0 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c72:	2025      	movs	r0, #37	; 0x25
 8001c74:	f000 f9f9 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010800 	.word	0x40010800

08001c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	; 0x38
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_InitTick+0xe8>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_InitTick+0xe8>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_InitTick+0xe8>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cba:	f107 0210 	add.w	r2, r7, #16
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 f857 	bl	8002d78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cd4:	f001 f828 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8001cd8:	6378      	str	r0, [r7, #52]	; 0x34
 8001cda:	e004      	b.n	8001ce6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cdc:	f001 f824 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_InitTick+0xec>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_InitTick+0xf0>)
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_InitTick+0xf4>)
 8001cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_InitTick+0xf0>)
 8001cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d00:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001d1a:	4818      	ldr	r0, [pc, #96]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d1c:	f001 f87a 	bl	8002e14 <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11b      	bne.n	8001d66 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001d2e:	4813      	ldr	r0, [pc, #76]	; (8001d7c <HAL_InitTick+0xf0>)
 8001d30:	f001 f8c0 	bl	8002eb4 <HAL_TIM_Base_Start_IT>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d111      	bne.n	8001d66 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d42:	201e      	movs	r0, #30
 8001d44:	f000 f991 	bl	800206a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	d808      	bhi.n	8001d60 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	201e      	movs	r0, #30
 8001d54:	f000 f96d 	bl	8002032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_InitTick+0xf8>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e002      	b.n	8001d66 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3738      	adds	r7, #56	; 0x38
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	200003d4 	.word	0x200003d4
 8001d80:	40000800 	.word	0x40000800
 8001d84:	20000018 	.word	0x20000018

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_STP2_Pin);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 fbca 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_DC1_Pin);
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f000 fbc3 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM3_IRQHandler+0x10>)
 8001dd6:	f001 f9b9 	bl	800314c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000340 	.word	0x20000340

08001de4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM4_IRQHandler+0x10>)
 8001dea:	f001 f9af 	bl	800314c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200003d4 	.word	0x200003d4

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART1_IRQHandler+0x10>)
 8001dfe:	f001 ffe5 	bl	8003dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000388 	.word	0x20000388

08001e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	; (8001e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3e:	f7ff ffe5 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f003 fd7d 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7ff f8c5 	bl	8000fd4 <main>
  bx lr
 8001e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001e54:	08005a38 	.word	0x08005a38
  ldr r2, =_sbss
 8001e58:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001e5c:	2000116c 	.word	0x2000116c

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f8d1 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f7ff ff06 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fe10 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	2000041c 	.word	0x2000041c

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	2000041c 	.word	0x2000041c

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <__NVIC_EnableIRQ+0x34>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff4f 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff64 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ffb2 	bl	8001fb8 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff81 	bl	8001f64 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff57 	bl	8001f2c <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002098:	2b02      	cmp	r3, #2
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2204      	movs	r2, #4
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e020      	b.n	80020f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020e 	bic.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800210e:	2b02      	cmp	r3, #2
 8002110:	d005      	beq.n	800211e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e051      	b.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 020e 	bic.w	r2, r2, #14
 800212c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Abort_IT+0xd0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d029      	beq.n	800219c <HAL_DMA_Abort_IT+0xa0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_DMA_Abort_IT+0xd4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Abort_IT+0x9c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_DMA_Abort_IT+0xd8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01a      	beq.n	8002192 <HAL_DMA_Abort_IT+0x96>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_DMA_Abort_IT+0xdc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d012      	beq.n	800218c <HAL_DMA_Abort_IT+0x90>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_DMA_Abort_IT+0xe0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00a      	beq.n	8002186 <HAL_DMA_Abort_IT+0x8a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_DMA_Abort_IT+0xe4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d102      	bne.n	8002180 <HAL_DMA_Abort_IT+0x84>
 800217a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800217e:	e00e      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002184:	e00b      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218a:	e008      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800218c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002190:	e005      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	e002      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 8002198:	2310      	movs	r3, #16
 800219a:	e000      	b.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800219c:	2301      	movs	r3, #1
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_DMA_Abort_IT+0xe8>)
 80021a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
    } 
  }
  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020008 	.word	0x40020008
 80021d0:	4002001c 	.word	0x4002001c
 80021d4:	40020030 	.word	0x40020030
 80021d8:	40020044 	.word	0x40020044
 80021dc:	40020058 	.word	0x40020058
 80021e0:	4002006c 	.word	0x4002006c
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b08b      	sub	sp, #44	; 0x2c
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	e169      	b.n	80024d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021fc:	2201      	movs	r2, #1
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8158 	bne.w	80024ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a9a      	ldr	r2, [pc, #616]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d05e      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002224:	4a98      	ldr	r2, [pc, #608]	; (8002488 <HAL_GPIO_Init+0x2a0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d875      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800222a:	4a98      	ldr	r2, [pc, #608]	; (800248c <HAL_GPIO_Init+0x2a4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d058      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002230:	4a96      	ldr	r2, [pc, #600]	; (800248c <HAL_GPIO_Init+0x2a4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d86f      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002236:	4a96      	ldr	r2, [pc, #600]	; (8002490 <HAL_GPIO_Init+0x2a8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d052      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 800223c:	4a94      	ldr	r2, [pc, #592]	; (8002490 <HAL_GPIO_Init+0x2a8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d869      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002242:	4a94      	ldr	r2, [pc, #592]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04c      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002248:	4a92      	ldr	r2, [pc, #584]	; (8002494 <HAL_GPIO_Init+0x2ac>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d863      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800224e:	4a92      	ldr	r2, [pc, #584]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d046      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
 8002254:	4a90      	ldr	r2, [pc, #576]	; (8002498 <HAL_GPIO_Init+0x2b0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d85d      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 800225a:	2b12      	cmp	r3, #18
 800225c:	d82a      	bhi.n	80022b4 <HAL_GPIO_Init+0xcc>
 800225e:	2b12      	cmp	r3, #18
 8002260:	d859      	bhi.n	8002316 <HAL_GPIO_Init+0x12e>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <HAL_GPIO_Init+0x80>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	080022e3 	.word	0x080022e3
 800226c:	080022bd 	.word	0x080022bd
 8002270:	080022cf 	.word	0x080022cf
 8002274:	08002311 	.word	0x08002311
 8002278:	08002317 	.word	0x08002317
 800227c:	08002317 	.word	0x08002317
 8002280:	08002317 	.word	0x08002317
 8002284:	08002317 	.word	0x08002317
 8002288:	08002317 	.word	0x08002317
 800228c:	08002317 	.word	0x08002317
 8002290:	08002317 	.word	0x08002317
 8002294:	08002317 	.word	0x08002317
 8002298:	08002317 	.word	0x08002317
 800229c:	08002317 	.word	0x08002317
 80022a0:	08002317 	.word	0x08002317
 80022a4:	08002317 	.word	0x08002317
 80022a8:	08002317 	.word	0x08002317
 80022ac:	080022c5 	.word	0x080022c5
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	4a79      	ldr	r2, [pc, #484]	; (800249c <HAL_GPIO_Init+0x2b4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ba:	e02c      	b.n	8002316 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e029      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	3304      	adds	r3, #4
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e024      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e01f      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	330c      	adds	r3, #12
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e01a      	b.n	8002318 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ea:	2304      	movs	r3, #4
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e013      	b.n	8002318 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	611a      	str	r2, [r3, #16]
          break;
 8002302:	e009      	b.n	8002318 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002304:	2308      	movs	r3, #8
 8002306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	615a      	str	r2, [r3, #20]
          break;
 800230e:	e003      	b.n	8002318 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x130>
          break;
 8002316:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d801      	bhi.n	8002322 <HAL_GPIO_Init+0x13a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e001      	b.n	8002326 <HAL_GPIO_Init+0x13e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d802      	bhi.n	8002334 <HAL_GPIO_Init+0x14c>
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x152>
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3b08      	subs	r3, #8
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	210f      	movs	r1, #15
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	6a39      	ldr	r1, [r7, #32]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80b1 	beq.w	80024ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_GPIO_Init+0x2b8>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_GPIO_Init+0x2b8>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_GPIO_Init+0x2b8>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002380:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_GPIO_Init+0x2bc>)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <HAL_GPIO_Init+0x2c0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <HAL_GPIO_Init+0x1ec>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <HAL_GPIO_Init+0x2c4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00d      	beq.n	80023d0 <HAL_GPIO_Init+0x1e8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_GPIO_Init+0x2c8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <HAL_GPIO_Init+0x1e4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <HAL_GPIO_Init+0x2cc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_GPIO_Init+0x1e0>
 80023c4:	2303      	movs	r3, #3
 80023c6:	e006      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023c8:	2304      	movs	r3, #4
 80023ca:	e004      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023d4:	2300      	movs	r3, #0
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	4093      	lsls	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023e6:	492f      	ldr	r1, [pc, #188]	; (80024a4 <HAL_GPIO_Init+0x2bc>)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	492c      	ldr	r1, [pc, #176]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	4928      	ldr	r1, [pc, #160]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4922      	ldr	r1, [pc, #136]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	491e      	ldr	r1, [pc, #120]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4918      	ldr	r1, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	4914      	ldr	r1, [pc, #80]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 8002468:	4013      	ands	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d021      	beq.n	80024bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e021      	b.n	80024ca <HAL_GPIO_Init+0x2e2>
 8002486:	bf00      	nop
 8002488:	10320000 	.word	0x10320000
 800248c:	10310000 	.word	0x10310000
 8002490:	10220000 	.word	0x10220000
 8002494:	10210000 	.word	0x10210000
 8002498:	10120000 	.word	0x10120000
 800249c:	10110000 	.word	0x10110000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010800 	.word	0x40010800
 80024ac:	40010c00 	.word	0x40010c00
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40011400 	.word	0x40011400
 80024b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_GPIO_Init+0x304>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4909      	ldr	r1, [pc, #36]	; (80024ec <HAL_GPIO_Init+0x304>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f ae8e 	bne.w	80021fc <HAL_GPIO_Init+0x14>
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	372c      	adds	r7, #44	; 0x2c
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e001      	b.n	8002512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	807b      	strh	r3, [r7, #2]
 800252a:	4613      	mov	r3, r2
 800252c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252e:	787b      	ldrb	r3, [r7, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800253a:	e003      	b.n	8002544 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	611a      	str	r2, [r3, #16]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
	...

08002550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe ffde 	bl	8001530 <HAL_GPIO_EXTI_Callback>
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e272      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d112      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d10b      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d06c      	beq.n	80026ac <HAL_RCC_OscConfig+0x12c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d168      	bne.n	80026ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e24c      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x76>
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7f      	ldr	r2, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xbc>
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 800263c:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a67      	ldr	r2, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fc2a 	bl	8001eb4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff fc26 	bl	8001eb4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e200      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xe4>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fc16 	bl	8001eb4 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fc12 	bl	8001eb4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1ec      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x10c>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ba:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c0      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4939      	ldr	r1, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7ff fbcb 	bl	8001eb4 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff fbc7 	bl	8001eb4 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4927      	ldr	r1, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff fbaa 	bl	8001eb4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff fba6 	bl	8001eb4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e180      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d03a      	beq.n	8002804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d019      	beq.n	80027ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7ff fb8a 	bl	8001eb4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb86 	bl	8001eb4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e160      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 fb08 	bl	8002dd8 <RCC_Delay>
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7ff fb70 	bl	8001eb4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff fb6c 	bl	8001eb4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d908      	bls.n	80027f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e146      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	42420000 	.word	0x42420000
 80027f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e9      	bne.n	80027d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a6 	beq.w	800295e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a87      	ldr	r2, [pc, #540]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b7f      	ldr	r3, [pc, #508]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7e      	ldr	r2, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7ff fb2d 	bl	8001eb4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7ff fb29 	bl	8001eb4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e103      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x312>
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e02d      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x334>
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a66      	ldr	r2, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x356>
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a60      	ldr	r2, [pc, #384]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fadd 	bl	8001eb4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff fad9 	bl	8001eb4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x37e>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff fac7 	bl	8001eb4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff fac3 	bl	8001eb4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e09b      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d061      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d146      	bne.n	8002a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fa97 	bl	8001eb4 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff fa93 	bl	8001eb4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e06d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4921      	ldr	r1, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a19      	ldr	r1, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	430b      	orrs	r3, r1
 80029d6:	491b      	ldr	r1, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff fa67 	bl	8001eb4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff fa63 	bl	8001eb4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x46a>
 8002a08:	e035      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fa50 	bl	8001eb4 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff fa4c 	bl	8001eb4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e026      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x498>
 8002a36:	e01e      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e019      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x500>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e073      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4936      	ldr	r1, [pc, #216]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7ff f99e 	bl	8001eb4 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7ff f99a 	bl	8001eb4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e053      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1cc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f82a 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08005a18 	.word	0x08005a18
 8002c50:	20000014 	.word	0x20000014
 8002c54:	20000018 	.word	0x20000018

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b490      	push	{r4, r7}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c60:	1d3c      	adds	r4, r7, #4
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c68:	f240 2301 	movw	r3, #513	; 0x201
 8002c6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x46>
 8002c96:	e02b      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c9a:	623b      	str	r3, [r7, #32]
      break;
 8002c9c:	e02b      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3328      	adds	r3, #40	; 0x28
 8002ca8:	443b      	add	r3, r7
 8002caa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0c5b      	lsrs	r3, r3, #17
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	3328      	adds	r3, #40	; 0x28
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ccc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e004      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	623b      	str	r3, [r7, #32]
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf2:	623b      	str	r3, [r7, #32]
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc90      	pop	{r4, r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	08005a00 	.word	0x08005a00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	003d0900 	.word	0x003d0900

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000014 	.word	0x20000014

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff2 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08005a28 	.word	0x08005a28

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0adb      	lsrs	r3, r3, #11
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08005a28 	.word	0x08005a28

08002d78 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	220f      	movs	r2, #15
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_GetClockConfig+0x58>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_RCC_GetClockConfig+0x58>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_GetClockConfig+0x58>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_RCC_GetClockConfig+0x58>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0207 	and.w	r2, r3, #7
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCC_Delay+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_Delay+0x38>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df4:	bf00      	nop
  }
  while (Delay --);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <RCC_Delay+0x1c>
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000014 	.word	0x20000014
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fe6a 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fc28 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d001      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e03a      	b.n	8002f42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_TIM_Base_Start_IT+0x98>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x58>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x58>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_Base_Start_IT+0x9c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x58>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d111      	bne.n	8002f30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d010      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	e007      	b.n	8002f40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f839 	bl	8002ff6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 fb86 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_TIM_PWM_Start+0x24>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e022      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d109      	bne.n	8003046 <HAL_TIM_PWM_Start+0x3e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e015      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d109      	bne.n	8003060 <HAL_TIM_PWM_Start+0x58>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e008      	b.n	8003072 <HAL_TIM_PWM_Start+0x6a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e05e      	b.n	8003138 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <HAL_TIM_PWM_Start+0x82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003088:	e013      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0x92>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	e00b      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0xa2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	e003      	b.n	80030b2 <HAL_TIM_PWM_Start+0xaa>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fd74 	bl	8003ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_TIM_PWM_Start+0x138>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d107      	bne.n	80030da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_TIM_PWM_Start+0x138>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_TIM_PWM_Start+0xfa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d009      	beq.n	8003102 <HAL_TIM_PWM_Start+0xfa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_TIM_PWM_Start+0x13c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_TIM_PWM_Start+0xfa>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_TIM_PWM_Start+0x140>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d010      	beq.n	8003136 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	e007      	b.n	8003136 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800

0800314c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0202 	mvn.w	r2, #2
 8003178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa6f 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa62 	bl	8003660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa71 	bl	8003684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0204 	mvn.w	r2, #4
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa45 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa38 	bl	8003660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa47 	bl	8003684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b08      	cmp	r3, #8
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b08      	cmp	r3, #8
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0208 	mvn.w	r2, #8
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa1b 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa0e 	bl	8003660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa1d 	bl	8003684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b10      	cmp	r3, #16
 800325c:	d122      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b10      	cmp	r3, #16
 800326a:	d11b      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0210 	mvn.w	r2, #16
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2208      	movs	r2, #8
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9f1 	bl	8003672 <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9e4 	bl	8003660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f9f3 	bl	8003684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0201 	mvn.w	r2, #1
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fa68 	bl	80017a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b80      	cmp	r3, #128	; 0x80
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fce1 	bl	8003cbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9b7 	bl	8003696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b20      	cmp	r3, #32
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b20      	cmp	r3, #32
 8003342:	d107      	bne.n	8003354 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0220 	mvn.w	r2, #32
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fcac 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003372:	2302      	movs	r3, #2
 8003374:	e0ac      	b.n	80034d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	f200 809f 	bhi.w	80034c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033c1 	.word	0x080033c1
 8003390:	080034c5 	.word	0x080034c5
 8003394:	080034c5 	.word	0x080034c5
 8003398:	080034c5 	.word	0x080034c5
 800339c:	08003401 	.word	0x08003401
 80033a0:	080034c5 	.word	0x080034c5
 80033a4:	080034c5 	.word	0x080034c5
 80033a8:	080034c5 	.word	0x080034c5
 80033ac:	08003443 	.word	0x08003443
 80033b0:	080034c5 	.word	0x080034c5
 80033b4:	080034c5 	.word	0x080034c5
 80033b8:	080034c5 	.word	0x080034c5
 80033bc:	08003483 	.word	0x08003483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9d0 	bl	800376c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	619a      	str	r2, [r3, #24]
      break;
 80033fe:	e062      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fa16 	bl	8003838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6999      	ldr	r1, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
      break;
 8003440:	e041      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fa5f 	bl	800390c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0208 	orr.w	r2, r2, #8
 800345c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0204 	bic.w	r2, r2, #4
 800346c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	61da      	str	r2, [r3, #28]
      break;
 8003480:	e021      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 faa9 	bl	80039e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69d9      	ldr	r1, [r3, #28]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	61da      	str	r2, [r3, #28]
      break;
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b3      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x180>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d03e      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xd0>
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	f200 8087 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	f000 8085 	beq.w	8003644 <HAL_TIM_ConfigClockSource+0x16c>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d87f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d01a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xa2>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d87b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d050      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x116>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d877      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d03c      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xf6>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d873      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d058      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x136>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d86f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d064      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x156>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d86b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d060      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x156>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d867      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x156>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d05a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003578:	e062      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f000 faee 	bl	8003b6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e04e      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f000 fad7 	bl	8003b6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ca:	609a      	str	r2, [r3, #8]
      break;
 80035cc:	e03b      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa4e 	bl	8003a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2150      	movs	r1, #80	; 0x50
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 faa5 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e02b      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fa6c 	bl	8003ad8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2160      	movs	r1, #96	; 0x60
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa95 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 800360c:	e01b      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fa2e 	bl	8003a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa85 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 800362c:	e00b      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 fa7c 	bl	8003b36 <TIM_ITRx_SetConfig>
        break;
 800363e:	e002      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003644:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <TIM_Base_SetConfig+0xb8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00b      	beq.n	80036d8 <TIM_Base_SetConfig+0x30>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d007      	beq.n	80036d8 <TIM_Base_SetConfig+0x30>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <TIM_Base_SetConfig+0xbc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_Base_SetConfig+0x30>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a25      	ldr	r2, [pc, #148]	; (8003768 <TIM_Base_SetConfig+0xc0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d108      	bne.n	80036ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <TIM_Base_SetConfig+0xb8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <TIM_Base_SetConfig+0xbc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a18      	ldr	r2, [pc, #96]	; (8003768 <TIM_Base_SetConfig+0xc0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a07      	ldr	r2, [pc, #28]	; (8003760 <TIM_Base_SetConfig+0xb8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d103      	bne.n	8003750 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800

0800376c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0201 	bic.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 0302 	bic.w	r3, r3, #2
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <TIM_OC1_SetConfig+0xc8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10c      	bne.n	80037e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0308 	bic.w	r3, r3, #8
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <TIM_OC1_SetConfig+0xc8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00

08003838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f023 0210 	bic.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0320 	bic.w	r3, r3, #32
 8003882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_OC2_SetConfig+0xd0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10d      	bne.n	80038b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <TIM_OC2_SetConfig+0xd0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d113      	bne.n	80038e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	40012c00 	.word	0x40012c00

0800390c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <TIM_OC3_SetConfig+0xd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC3_SetConfig+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d113      	bne.n	80039b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <TIM_OC4_SetConfig+0x98>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d109      	bne.n	8003a54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00

08003a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 030a 	bic.w	r3, r3, #10
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 0210 	bic.w	r2, r3, #16
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	031b      	lsls	r3, r3, #12
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0307 	orr.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b087      	sub	sp, #28
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	021a      	lsls	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e046      	b.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d009      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10c      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e03f      	b.n	8003d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd ff74 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fba9 	bl	800446c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d11d      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Receive_IT+0x26>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e016      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Receive_IT+0x38>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e00f      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9cf 	bl	800415a <UART_Start_Receive_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_UART_IRQHandler+0x52>
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa7f 	bl	800431a <UART_Receive_IT>
      return;
 8003e1c:	e17b      	b.n	8004116 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80b1 	beq.w	8003f88 <HAL_UART_IRQHandler+0x1bc>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_UART_IRQHandler+0x70>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_UART_IRQHandler+0x90>
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_UART_IRQHandler+0xb0>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0202 	orr.w	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_UART_IRQHandler+0xd0>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xfa>
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <HAL_UART_IRQHandler+0xee>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0208 	orr.w	r2, r3, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 811e 	beq.w	800410c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_UART_IRQHandler+0x11e>
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fa18 	bl	800431a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_UART_IRQHandler+0x146>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d031      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f95a 	bl	80041cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d013      	beq.n	8003f66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	4a76      	ldr	r2, [pc, #472]	; (800411c <HAL_UART_IRQHandler+0x350>)
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe f8d6 	bl	80020fc <HAL_DMA_Abort_IT>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f60:	4610      	mov	r0, r2
 8003f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00e      	b.n	8003f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e3 	bl	8004132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e00a      	b.n	8003f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8df 	bl	8004132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e006      	b.n	8003f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8db 	bl	8004132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f82:	e0c3      	b.n	800410c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	bf00      	nop
    return;
 8003f86:	e0c1      	b.n	800410c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 80a1 	bne.w	80040d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 809b 	beq.w	80040d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8095 	beq.w	80040d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04e      	beq.n	800406c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003fd8:	8a3b      	ldrh	r3, [r7, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8098 	beq.w	8004110 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe4:	8a3a      	ldrh	r2, [r7, #16]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f080 8092 	bcs.w	8004110 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8a3a      	ldrh	r2, [r7, #16]
 8003ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d02b      	beq.n	8004054 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0210 	bic.w	r2, r2, #16
 8004048:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe f819 	bl	8002086 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800405c:	b29b      	uxth	r3, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f86d 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800406a:	e051      	b.n	8004110 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004074:	b29b      	uxth	r3, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d047      	beq.n	8004114 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004084:	8a7b      	ldrh	r3, [r7, #18]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d044      	beq.n	8004114 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004098:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0210 	bic.w	r2, r2, #16
 80040c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c8:	8a7b      	ldrh	r3, [r7, #18]
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f839 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040d2:	e01f      	b.n	8004114 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_UART_IRQHandler+0x324>
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8af 	bl	800424c <UART_Transmit_IT>
    return;
 80040ee:	e012      	b.n	8004116 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_UART_IRQHandler+0x34a>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f8f0 	bl	80042ea <UART_EndTransmit_IT>
    return;
 800410a:	e004      	b.n	8004116 <HAL_UART_IRQHandler+0x34a>
    return;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_UART_IRQHandler+0x34a>
      return;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_UART_IRQHandler+0x34a>
      return;
 8004114:	bf00      	nop
  }
}
 8004116:	3728      	adds	r7, #40	; 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08004225 	.word	0x08004225

08004120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2222      	movs	r2, #34	; 0x22
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0210 	bic.w	r2, r2, #16
 800420a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff77 	bl	8004132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b21      	cmp	r3, #33	; 0x21
 800425e:	d13e      	bne.n	80042de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d114      	bne.n	8004294 <UART_Transmit_IT+0x48>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d110      	bne.n	8004294 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004286:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]
 8004292:	e008      	b.n	80042a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	1c59      	adds	r1, r3, #1
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6211      	str	r1, [r2, #32]
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4619      	mov	r1, r3
 80042b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff08 	bl	8004120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b22      	cmp	r3, #34	; 0x22
 800432c:	f040 8099 	bne.w	8004462 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d117      	bne.n	800436a <UART_Receive_IT+0x50>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d113      	bne.n	800436a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	b29a      	uxth	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
 8004368:	e026      	b.n	80043b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d007      	beq.n	800438e <UART_Receive_IT+0x74>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <UART_Receive_IT+0x82>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e008      	b.n	80043ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4619      	mov	r1, r3
 80043c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d148      	bne.n	800445e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0220 	bic.w	r2, r2, #32
 80043da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d123      	bne.n	8004454 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0210 	bic.w	r2, r2, #16
 8004420:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d10a      	bne.n	8004446 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fe79 	bl	8004144 <HAL_UARTEx_RxEventCallback>
 8004452:	e002      	b.n	800445a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fc fff7 	bl	8001448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e002      	b.n	8004464 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044a6:	f023 030c 	bic.w	r3, r3, #12
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <UART_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fc3c 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	e002      	b.n	80044e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fc24 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80044e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <UART_SetConfig+0x118>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	0119      	lsls	r1, r3, #4
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f2f3 	udiv	r2, r2, r3
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <UART_SetConfig+0x118>)
 800451a:	fba3 0302 	umull	r0, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2064      	movs	r0, #100	; 0x64
 8004522:	fb00 f303 	mul.w	r3, r0, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <UART_SetConfig+0x118>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	4419      	add	r1, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <UART_SetConfig+0x118>)
 8004552:	fba3 0302 	umull	r0, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2064      	movs	r0, #100	; 0x64
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	440a      	add	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40013800 	.word	0x40013800
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459a:	2b84      	cmp	r3, #132	; 0x84
 800459c:	d005      	beq.n	80045aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800459e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	3303      	adds	r3, #3
 80045a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045ba:	f000 fad1 	bl	8004b60 <vTaskStartScheduler>
  
  return osOK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <osThreadCreate+0x54>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01c      	beq.n	8004618 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685c      	ldr	r4, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681d      	ldr	r5, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691e      	ldr	r6, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ffc9 	bl	8004588 <makeFreeRtosPriority>
 80045f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004600:	9202      	str	r2, [sp, #8]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	9100      	str	r1, [sp, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4632      	mov	r2, r6
 800460a:	4629      	mov	r1, r5
 800460c:	4620      	mov	r0, r4
 800460e:	f000 f8e8 	bl	80047e2 <xTaskCreateStatic>
 8004612:	4603      	mov	r3, r0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e01c      	b.n	8004652 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685c      	ldr	r4, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004624:	b29e      	uxth	r6, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ffab 	bl	8004588 <makeFreeRtosPriority>
 8004632:	4602      	mov	r2, r0
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	9200      	str	r2, [sp, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4632      	mov	r2, r6
 8004640:	4629      	mov	r1, r5
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f929 	bl	800489a <xTaskCreate>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800465c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <osDelay+0x16>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	e000      	b.n	8004674 <osDelay+0x18>
 8004672:	2301      	movs	r3, #1
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fa3f 	bl	8004af8 <vTaskDelay>
  
  return osOK;
 800467a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f103 0208 	add.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f103 0208 	add.w	r2, r3, #8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f103 0208 	add.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d103      	bne.n	8004740 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e00c      	b.n	800475a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3308      	adds	r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <vListInsert+0x2e>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d2f6      	bcs.n	8004748 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6852      	ldr	r2, [r2, #4]
 80047b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d103      	bne.n	80047c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b08e      	sub	sp, #56	; 0x38
 80047e6:	af04      	add	r7, sp, #16
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xTaskCreateStatic+0x46>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fb      	str	r3, [r7, #28]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004828:	2354      	movs	r3, #84	; 0x54
 800482a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b54      	cmp	r3, #84	; 0x54
 8004830:	d00a      	beq.n	8004848 <xTaskCreateStatic+0x66>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61bb      	str	r3, [r7, #24]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01e      	beq.n	800488c <xTaskCreateStatic+0xaa>
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	2202      	movs	r2, #2
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004866:	2300      	movs	r3, #0
 8004868:	9303      	str	r3, [sp, #12]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	9302      	str	r3, [sp, #8]
 800486e:	f107 0314 	add.w	r3, r7, #20
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f850 	bl	8004924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004886:	f000 f8cd 	bl	8004a24 <prvAddNewTaskToReadyList>
 800488a:	e001      	b.n	8004890 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004890:	697b      	ldr	r3, [r7, #20]
	}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	; 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800489a:	b580      	push	{r7, lr}
 800489c:	b08c      	sub	sp, #48	; 0x30
 800489e:	af04      	add	r7, sp, #16
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fe6e 	bl	8005590 <pvPortMalloc>
 80048b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00e      	beq.n	80048da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048bc:	2054      	movs	r0, #84	; 0x54
 80048be:	f000 fe67 	bl	8005590 <pvPortMalloc>
 80048c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
 80048d0:	e005      	b.n	80048de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f000 ff20 	bl	8005718 <vPortFree>
 80048d8:	e001      	b.n	80048de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9303      	str	r3, [sp, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f80e 	bl	8004924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004908:	69f8      	ldr	r0, [r7, #28]
 800490a:	f000 f88b 	bl	8004a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800490e:	2301      	movs	r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	e002      	b.n	800491a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800491a:	69bb      	ldr	r3, [r7, #24]
	}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800493c:	3b01      	subs	r3, #1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	617b      	str	r3, [r7, #20]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e012      	b.n	8004998 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	7819      	ldrb	r1, [r3, #0]
 800497a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	3334      	adds	r3, #52	; 0x34
 8004982:	460a      	mov	r2, r1
 8004984:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d9e9      	bls.n	8004972 <prvInitialiseNewTask+0x4e>
 800499e:	e000      	b.n	80049a2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80049a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d901      	bls.n	80049b4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049b0:	2306      	movs	r3, #6
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	3304      	adds	r3, #4
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fe79 	bl	80046c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	3318      	adds	r3, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fe74 	bl	80046c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	f1c3 0207 	rsb	r2, r3, #7
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	69b8      	ldr	r0, [r7, #24]
 8004a04:	f000 fc0e 	bl	8005224 <pxPortInitialiseStack>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1a:	bf00      	nop
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a2c:	f000 fcee 	bl	800540c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a30:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a29      	ldr	r2, [pc, #164]	; (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a42:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <prvAddNewTaskToReadyList+0xb8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d110      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a50:	f000 fac0 	bl	8004fd4 <prvInitialiseTaskLists>
 8004a54:	e00d      	b.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a56:	4b23      	ldr	r3, [pc, #140]	; (8004ae4 <prvAddNewTaskToReadyList+0xc0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d802      	bhi.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	2201      	movs	r2, #1
 8004a82:	409a      	lsls	r2, r3
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <prvAddNewTaskToReadyList+0xcc>)
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7ff fe18 	bl	80046da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004aaa:	f000 fcdf 	bl	800546c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <prvAddNewTaskToReadyList+0xc0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <prvAddNewTaskToReadyList+0xbc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000520 	.word	0x20000520
 8004ae0:	20000420 	.word	0x20000420
 8004ae4:	2000052c 	.word	0x2000052c
 8004ae8:	2000053c 	.word	0x2000053c
 8004aec:	20000528 	.word	0x20000528
 8004af0:	20000424 	.word	0x20000424
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <vTaskDelay+0x60>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <vTaskDelay+0x30>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b28:	f000 f87a 	bl	8004c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fb12 	bl	8005158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b34:	f000 f882 	bl	8004c3c <xTaskResumeAll>
 8004b38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d107      	bne.n	8004b50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <vTaskDelay+0x64>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000548 	.word	0x20000548
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b6e:	463a      	mov	r2, r7
 8004b70:	1d39      	adds	r1, r7, #4
 8004b72:	f107 0308 	add.w	r3, r7, #8
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fa14 	bl	8000fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	9202      	str	r2, [sp, #8]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	491e      	ldr	r1, [pc, #120]	; (8004c08 <vTaskStartScheduler+0xa8>)
 8004b90:	481e      	ldr	r0, [pc, #120]	; (8004c0c <vTaskStartScheduler+0xac>)
 8004b92:	f7ff fe26 	bl	80047e2 <xTaskCreateStatic>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <vTaskStartScheduler+0xb0>)
 8004b9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <vTaskStartScheduler+0xb0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e001      	b.n	8004bae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d116      	bne.n	8004be2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	613b      	str	r3, [r7, #16]
}
 8004bc6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <vTaskStartScheduler+0xb4>)
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <vTaskStartScheduler+0xb8>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <vTaskStartScheduler+0xbc>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bdc:	f000 fba4 	bl	8005328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004be0:	e00e      	b.n	8004c00 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d10a      	bne.n	8004c00 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60fb      	str	r3, [r7, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vTaskStartScheduler+0x9e>
}
 8004c00:	bf00      	nop
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08005a10 	.word	0x08005a10
 8004c0c:	08004fa5 	.word	0x08004fa5
 8004c10:	20000544 	.word	0x20000544
 8004c14:	20000540 	.word	0x20000540
 8004c18:	2000052c 	.word	0x2000052c
 8004c1c:	20000524 	.word	0x20000524

08004c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <vTaskSuspendAll+0x18>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	4a03      	ldr	r2, [pc, #12]	; (8004c38 <vTaskSuspendAll+0x18>)
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000548 	.word	0x20000548

08004c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c4a:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <xTaskResumeAll+0x114>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	603b      	str	r3, [r7, #0]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c68:	f000 fbd0 	bl	800540c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <xTaskResumeAll+0x114>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	4a37      	ldr	r2, [pc, #220]	; (8004d50 <xTaskResumeAll+0x114>)
 8004c74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c76:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <xTaskResumeAll+0x114>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d161      	bne.n	8004d42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c7e:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <xTaskResumeAll+0x118>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d05d      	beq.n	8004d42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c86:	e02e      	b.n	8004ce6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c88:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <xTaskResumeAll+0x11c>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3318      	adds	r3, #24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fd7b 	bl	8004790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fd76 	bl	8004790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	2201      	movs	r2, #1
 8004caa:	409a      	lsls	r2, r3
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <xTaskResumeAll+0x120>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <xTaskResumeAll+0x120>)
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a27      	ldr	r2, [pc, #156]	; (8004d60 <xTaskResumeAll+0x124>)
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7ff fd04 	bl	80046da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <xTaskResumeAll+0x128>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <xTaskResumeAll+0x12c>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <xTaskResumeAll+0x11c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1cc      	bne.n	8004c88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cf4:	f000 fa0c 	bl	8005110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004cf8:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <xTaskResumeAll+0x130>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d010      	beq.n	8004d26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d04:	f000 f836 	bl	8004d74 <xTaskIncrementTick>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <xTaskResumeAll+0x12c>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f1      	bne.n	8004d04 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <xTaskResumeAll+0x130>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <xTaskResumeAll+0x12c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <xTaskResumeAll+0x134>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f000 fb93 	bl	800546c <vPortExitCritical>

	return xAlreadyYielded;
 8004d46:	68bb      	ldr	r3, [r7, #8]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000548 	.word	0x20000548
 8004d54:	20000520 	.word	0x20000520
 8004d58:	200004e0 	.word	0x200004e0
 8004d5c:	20000528 	.word	0x20000528
 8004d60:	20000424 	.word	0x20000424
 8004d64:	20000420 	.word	0x20000420
 8004d68:	20000534 	.word	0x20000534
 8004d6c:	20000530 	.word	0x20000530
 8004d70:	e000ed04 	.word	0xe000ed04

08004d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d7e:	4b51      	ldr	r3, [pc, #324]	; (8004ec4 <xTaskIncrementTick+0x150>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f040 808d 	bne.w	8004ea2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d88:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <xTaskIncrementTick+0x154>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d90:	4a4d      	ldr	r2, [pc, #308]	; (8004ec8 <xTaskIncrementTick+0x154>)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d120      	bne.n	8004dde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <xTaskIncrementTick+0x158>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <xTaskIncrementTick+0x48>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	603b      	str	r3, [r7, #0]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <xTaskIncrementTick+0x46>
 8004dbc:	4b43      	ldr	r3, [pc, #268]	; (8004ecc <xTaskIncrementTick+0x158>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <xTaskIncrementTick+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a41      	ldr	r2, [pc, #260]	; (8004ecc <xTaskIncrementTick+0x158>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <xTaskIncrementTick+0x15c>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <xTaskIncrementTick+0x160>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a3f      	ldr	r2, [pc, #252]	; (8004ed4 <xTaskIncrementTick+0x160>)
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	f000 f999 	bl	8005110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dde:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <xTaskIncrementTick+0x164>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d34d      	bcc.n	8004e84 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004de8:	4b38      	ldr	r3, [pc, #224]	; (8004ecc <xTaskIncrementTick+0x158>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xTaskIncrementTick+0x82>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xTaskIncrementTick+0x84>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <xTaskIncrementTick+0x164>)
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	601a      	str	r2, [r3, #0]
					break;
 8004e04:	e03e      	b.n	8004e84 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <xTaskIncrementTick+0x158>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d203      	bcs.n	8004e26 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <xTaskIncrementTick+0x164>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6013      	str	r3, [r2, #0]
						break;
 8004e24:	e02e      	b.n	8004e84 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fcb0 	bl	8004790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3318      	adds	r3, #24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fca7 	bl	8004790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	2201      	movs	r2, #1
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <xTaskIncrementTick+0x168>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	4a22      	ldr	r2, [pc, #136]	; (8004edc <xTaskIncrementTick+0x168>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <xTaskIncrementTick+0x16c>)
 8004e62:	441a      	add	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7ff fc35 	bl	80046da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <xTaskIncrementTick+0x170>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3b4      	bcc.n	8004de8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e82:	e7b1      	b.n	8004de8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <xTaskIncrementTick+0x170>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	4915      	ldr	r1, [pc, #84]	; (8004ee0 <xTaskIncrementTick+0x16c>)
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d907      	bls.n	8004eac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e004      	b.n	8004eac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <xTaskIncrementTick+0x174>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <xTaskIncrementTick+0x174>)
 8004eaa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <xTaskIncrementTick+0x178>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004eb8:	697b      	ldr	r3, [r7, #20]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000548 	.word	0x20000548
 8004ec8:	20000524 	.word	0x20000524
 8004ecc:	200004d8 	.word	0x200004d8
 8004ed0:	200004dc 	.word	0x200004dc
 8004ed4:	20000538 	.word	0x20000538
 8004ed8:	20000540 	.word	0x20000540
 8004edc:	20000528 	.word	0x20000528
 8004ee0:	20000424 	.word	0x20000424
 8004ee4:	20000420 	.word	0x20000420
 8004ee8:	20000530 	.word	0x20000530
 8004eec:	20000534 	.word	0x20000534

08004ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ef6:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <vTaskSwitchContext+0xa0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004efe:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <vTaskSwitchContext+0xa4>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f04:	e03f      	b.n	8004f86 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004f06:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <vTaskSwitchContext+0xa4>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f0c:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <vTaskSwitchContext+0xa8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	fab3 f383 	clz	r3, r3
 8004f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f1c3 031f 	rsb	r3, r3, #31
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	491e      	ldr	r1, [pc, #120]	; (8004f9c <vTaskSwitchContext+0xac>)
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	607b      	str	r3, [r7, #4]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <vTaskSwitchContext+0x5a>
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4a11      	ldr	r2, [pc, #68]	; (8004f9c <vTaskSwitchContext+0xac>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d104      	bne.n	8004f7c <vTaskSwitchContext+0x8c>
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <vTaskSwitchContext+0xb0>)
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	20000548 	.word	0x20000548
 8004f94:	20000534 	.word	0x20000534
 8004f98:	20000528 	.word	0x20000528
 8004f9c:	20000424 	.word	0x20000424
 8004fa0:	20000420 	.word	0x20000420

08004fa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fac:	f000 f852 	bl	8005054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <prvIdleTask+0x28>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d9f9      	bls.n	8004fac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <prvIdleTask+0x2c>)
 8004fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fc8:	e7f0      	b.n	8004fac <prvIdleTask+0x8>
 8004fca:	bf00      	nop
 8004fcc:	20000424 	.word	0x20000424
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	e00c      	b.n	8004ffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <prvInitialiseTaskLists+0x60>)
 8004fec:	4413      	add	r3, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fb48 	bl	8004684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d9ef      	bls.n	8004fe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005000:	480d      	ldr	r0, [pc, #52]	; (8005038 <prvInitialiseTaskLists+0x64>)
 8005002:	f7ff fb3f 	bl	8004684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005006:	480d      	ldr	r0, [pc, #52]	; (800503c <prvInitialiseTaskLists+0x68>)
 8005008:	f7ff fb3c 	bl	8004684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800500c:	480c      	ldr	r0, [pc, #48]	; (8005040 <prvInitialiseTaskLists+0x6c>)
 800500e:	f7ff fb39 	bl	8004684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005012:	480c      	ldr	r0, [pc, #48]	; (8005044 <prvInitialiseTaskLists+0x70>)
 8005014:	f7ff fb36 	bl	8004684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005018:	480b      	ldr	r0, [pc, #44]	; (8005048 <prvInitialiseTaskLists+0x74>)
 800501a:	f7ff fb33 	bl	8004684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <prvInitialiseTaskLists+0x78>)
 8005020:	4a05      	ldr	r2, [pc, #20]	; (8005038 <prvInitialiseTaskLists+0x64>)
 8005022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvInitialiseTaskLists+0x7c>)
 8005026:	4a05      	ldr	r2, [pc, #20]	; (800503c <prvInitialiseTaskLists+0x68>)
 8005028:	601a      	str	r2, [r3, #0]
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000424 	.word	0x20000424
 8005038:	200004b0 	.word	0x200004b0
 800503c:	200004c4 	.word	0x200004c4
 8005040:	200004e0 	.word	0x200004e0
 8005044:	200004f4 	.word	0x200004f4
 8005048:	2000050c 	.word	0x2000050c
 800504c:	200004d8 	.word	0x200004d8
 8005050:	200004dc 	.word	0x200004dc

08005054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800505a:	e019      	b.n	8005090 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800505c:	f000 f9d6 	bl	800540c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005060:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <prvCheckTasksWaitingTermination+0x50>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fb8f 	bl	8004790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <prvCheckTasksWaitingTermination+0x54>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3b01      	subs	r3, #1
 8005078:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <prvCheckTasksWaitingTermination+0x54>)
 800507a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3b01      	subs	r3, #1
 8005082:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 8005084:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005086:	f000 f9f1 	bl	800546c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f810 	bl	80050b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e1      	bne.n	800505c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200004f4 	.word	0x200004f4
 80050a8:	20000520 	.word	0x20000520
 80050ac:	20000508 	.word	0x20000508

080050b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d108      	bne.n	80050d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fb26 	bl	8005718 <vPortFree>
				vPortFree( pxTCB );
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb23 	bl	8005718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050d2:	e018      	b.n	8005106 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d103      	bne.n	80050e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fb1a 	bl	8005718 <vPortFree>
	}
 80050e4:	e00f      	b.n	8005106 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d00a      	beq.n	8005106 <prvDeleteTCB+0x56>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <prvDeleteTCB+0x54>
	}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <prvResetNextTaskUnblockTime+0x40>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <prvResetNextTaskUnblockTime+0x14>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <prvResetNextTaskUnblockTime+0x16>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <prvResetNextTaskUnblockTime+0x44>)
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005132:	e008      	b.n	8005146 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <prvResetNextTaskUnblockTime+0x40>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4a04      	ldr	r2, [pc, #16]	; (8005154 <prvResetNextTaskUnblockTime+0x44>)
 8005144:	6013      	str	r3, [r2, #0]
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	200004d8 	.word	0x200004d8
 8005154:	20000540 	.word	0x20000540

08005158 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fb0e 	bl	8004790 <uxListRemove>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43da      	mvns	r2, r3
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4013      	ands	r3, r2
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005190:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d10a      	bne.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	481a      	ldr	r0, [pc, #104]	; (8005214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051aa:	f7ff fa96 	bl	80046da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051ae:	e026      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d209      	bcs.n	80051dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7ff faa3 	bl	8004720 <vListInsert>
}
 80051da:	e010      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <prvAddCurrentTaskToDelayedList+0xc4>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f7ff fa99 	bl	8004720 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d202      	bcs.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000524 	.word	0x20000524
 800520c:	20000420 	.word	0x20000420
 8005210:	20000528 	.word	0x20000528
 8005214:	2000050c 	.word	0x2000050c
 8005218:	200004dc 	.word	0x200004dc
 800521c:	200004d8 	.word	0x200004d8
 8005220:	20000540 	.word	0x20000540

08005224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b04      	subs	r3, #4
 8005234:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800523c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3b04      	subs	r3, #4
 8005242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b04      	subs	r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <pxPortInitialiseStack+0x54>)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3b14      	subs	r3, #20
 800525e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b20      	subs	r3, #32
 800526a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	0800527d 	.word	0x0800527d

0800527c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <prvTaskExitError+0x54>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d00a      	beq.n	80052a6 <prvTaskExitError+0x2a>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	60fb      	str	r3, [r7, #12]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <prvTaskExitError+0x28>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60bb      	str	r3, [r7, #8]
}
 80052b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052ba:	bf00      	nop
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0fc      	beq.n	80052bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000020 	.word	0x20000020
	...

080052e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <pxCurrentTCBConst2>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052ea:	f380 8809 	msr	PSP, r0
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8811 	msr	BASEPRI, r0
 80052fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052fe:	4770      	bx	lr

08005300 <pxCurrentTCBConst2>:
 8005300:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005308:	4806      	ldr	r0, [pc, #24]	; (8005324 <prvPortStartFirstTask+0x1c>)
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f380 8808 	msr	MSP, r0
 8005312:	b662      	cpsie	i
 8005314:	b661      	cpsie	f
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	df00      	svc	0
 8005320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005322:	bf00      	nop
 8005324:	e000ed08 	.word	0xe000ed08

08005328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800532e:	4b32      	ldr	r3, [pc, #200]	; (80053f8 <xPortStartScheduler+0xd0>)
 8005330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005350:	b2da      	uxtb	r2, r3
 8005352:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <xPortStartScheduler+0xd4>)
 8005354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <xPortStartScheduler+0xd8>)
 8005358:	2207      	movs	r2, #7
 800535a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535c:	e009      	b.n	8005372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <xPortStartScheduler+0xd8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <xPortStartScheduler+0xd8>)
 8005366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d0ef      	beq.n	800535e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <xPortStartScheduler+0xd8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1c3 0307 	rsb	r3, r3, #7
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00a      	beq.n	80053a0 <xPortStartScheduler+0x78>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <xPortStartScheduler+0xd8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	4a16      	ldr	r2, [pc, #88]	; (8005400 <xPortStartScheduler+0xd8>)
 80053a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <xPortStartScheduler+0xd8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <xPortStartScheduler+0xd8>)
 80053b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <xPortStartScheduler+0xdc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <xPortStartScheduler+0xdc>)
 80053c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <xPortStartScheduler+0xdc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <xPortStartScheduler+0xdc>)
 80053d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053d6:	f000 f8b9 	bl	800554c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <xPortStartScheduler+0xe0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053e0:	f7ff ff92 	bl	8005308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053e4:	f7ff fd84 	bl	8004ef0 <vTaskSwitchContext>
	prvTaskExitError();
 80053e8:	f7ff ff48 	bl	800527c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	e000e400 	.word	0xe000e400
 80053fc:	2000054c 	.word	0x2000054c
 8005400:	20000550 	.word	0x20000550
 8005404:	e000ed20 	.word	0xe000ed20
 8005408:	20000020 	.word	0x20000020

0800540c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <vPortEnterCritical+0x58>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <vPortEnterCritical+0x58>)
 800542e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <vPortEnterCritical+0x58>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10f      	bne.n	8005458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <vPortEnterCritical+0x5c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <vPortEnterCritical+0x4c>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	603b      	str	r3, [r7, #0]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <vPortEnterCritical+0x4a>
	}
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000020 	.word	0x20000020
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <vPortExitCritical+0x4c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <vPortExitCritical+0x24>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	607b      	str	r3, [r7, #4]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <vPortExitCritical+0x4c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <vPortExitCritical+0x4c>)
 8005498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <vPortExitCritical+0x4c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <vPortExitCritical+0x42>
 80054a2:	2300      	movs	r3, #0
 80054a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	20000020 	.word	0x20000020
 80054bc:	00000000 	.word	0x00000000

080054c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054c0:	f3ef 8009 	mrs	r0, PSP
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <pxCurrentTCBConst>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054d0:	6010      	str	r0, [r2, #0]
 80054d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80054d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054da:	f380 8811 	msr	BASEPRI, r0
 80054de:	f7ff fd07 	bl	8004ef0 <vTaskSwitchContext>
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8811 	msr	BASEPRI, r0
 80054ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054f6:	f380 8809 	msr	PSP, r0
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	4770      	bx	lr

08005500 <pxCurrentTCBConst>:
 8005500:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop

08005508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005522:	f7ff fc27 	bl	8004d74 <xTaskIncrementTick>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <SysTick_Handler+0x40>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <vPortSetupTimerInterrupt+0x30>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <vPortSetupTimerInterrupt+0x38>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <vPortSetupTimerInterrupt+0x3c>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <vPortSetupTimerInterrupt+0x40>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <vPortSetupTimerInterrupt+0x30>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	e000e010 	.word	0xe000e010
 8005580:	e000e018 	.word	0xe000e018
 8005584:	20000014 	.word	0x20000014
 8005588:	10624dd3 	.word	0x10624dd3
 800558c:	e000e014 	.word	0xe000e014

08005590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800559c:	f7ff fb40 	bl	8004c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055a0:	4b58      	ldr	r3, [pc, #352]	; (8005704 <pvPortMalloc+0x174>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a8:	f000 f910 	bl	80057cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055ac:	4b56      	ldr	r3, [pc, #344]	; (8005708 <pvPortMalloc+0x178>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 808e 	bne.w	80056d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01d      	beq.n	80055fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d014      	beq.n	80055fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f023 0307 	bic.w	r3, r3, #7
 80055d8:	3308      	adds	r3, #8
 80055da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <pvPortMalloc+0x6c>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617b      	str	r3, [r7, #20]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d069      	beq.n	80056d6 <pvPortMalloc+0x146>
 8005602:	4b42      	ldr	r3, [pc, #264]	; (800570c <pvPortMalloc+0x17c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d864      	bhi.n	80056d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <pvPortMalloc+0x180>)
 800560e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <pvPortMalloc+0x180>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005616:	e004      	b.n	8005622 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d903      	bls.n	8005634 <pvPortMalloc+0xa4>
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f1      	bne.n	8005618 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005634:	4b33      	ldr	r3, [pc, #204]	; (8005704 <pvPortMalloc+0x174>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	429a      	cmp	r2, r3
 800563c:	d04b      	beq.n	80056d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2208      	movs	r2, #8
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	2308      	movs	r3, #8
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	429a      	cmp	r2, r3
 800565e:	d91f      	bls.n	80056a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <pvPortMalloc+0xf8>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	613b      	str	r3, [r7, #16]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800569a:	69b8      	ldr	r0, [r7, #24]
 800569c:	f000 f8f8 	bl	8005890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <pvPortMalloc+0x17c>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <pvPortMalloc+0x17c>)
 80056ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ae:	4b17      	ldr	r3, [pc, #92]	; (800570c <pvPortMalloc+0x17c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b18      	ldr	r3, [pc, #96]	; (8005714 <pvPortMalloc+0x184>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d203      	bcs.n	80056c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <pvPortMalloc+0x17c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <pvPortMalloc+0x184>)
 80056c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <pvPortMalloc+0x178>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d6:	f7ff fab1 	bl	8004c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <pvPortMalloc+0x16a>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <pvPortMalloc+0x168>
	return pvReturn;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2000115c 	.word	0x2000115c
 8005708:	20001168 	.word	0x20001168
 800570c:	20001160 	.word	0x20001160
 8005710:	20001154 	.word	0x20001154
 8005714:	20001164 	.word	0x20001164

08005718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d048      	beq.n	80057bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800572a:	2308      	movs	r3, #8
 800572c:	425b      	negs	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <vPortFree+0xac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <vPortFree+0x44>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <vPortFree+0x62>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60bb      	str	r3, [r7, #8]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <vPortFree+0xac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d019      	beq.n	80057bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d115      	bne.n	80057bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <vPortFree+0xac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	43db      	mvns	r3, r3
 800579a:	401a      	ands	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a0:	f7ff fa3e 	bl	8004c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <vPortFree+0xb0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	4a06      	ldr	r2, [pc, #24]	; (80057c8 <vPortFree+0xb0>)
 80057b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057b2:	6938      	ldr	r0, [r7, #16]
 80057b4:	f000 f86c 	bl	8005890 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057b8:	f7ff fa40 	bl	8004c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20001168 	.word	0x20001168
 80057c8:	20001160 	.word	0x20001160

080057cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057d8:	4b27      	ldr	r3, [pc, #156]	; (8005878 <prvHeapInit+0xac>)
 80057da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3307      	adds	r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <prvHeapInit+0xac>)
 80057fc:	4413      	add	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <prvHeapInit+0xb0>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <prvHeapInit+0xb0>)
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005818:	2208      	movs	r2, #8
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <prvHeapInit+0xb4>)
 800582c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800582e:	4b14      	ldr	r3, [pc, #80]	; (8005880 <prvHeapInit+0xb4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <prvHeapInit+0xb4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <prvHeapInit+0xb4>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <prvHeapInit+0xb8>)
 800585a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a09      	ldr	r2, [pc, #36]	; (8005888 <prvHeapInit+0xbc>)
 8005862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <prvHeapInit+0xc0>)
 8005866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800586a:	601a      	str	r2, [r3, #0]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000554 	.word	0x20000554
 800587c:	20001154 	.word	0x20001154
 8005880:	2000115c 	.word	0x2000115c
 8005884:	20001164 	.word	0x20001164
 8005888:	20001160 	.word	0x20001160
 800588c:	20001168 	.word	0x20001168

08005890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005898:	4b27      	ldr	r3, [pc, #156]	; (8005938 <prvInsertBlockIntoFreeList+0xa8>)
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e002      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x14>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d8f7      	bhi.n	800589e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d108      	bne.n	80058d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	441a      	add	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d118      	bne.n	8005918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <prvInsertBlockIntoFreeList+0xac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d00d      	beq.n	800590e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e008      	b.n	8005920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvInsertBlockIntoFreeList+0xac>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e003      	b.n	8005920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d002      	beq.n	800592e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	20001154 	.word	0x20001154
 800593c:	2000115c 	.word	0x2000115c

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	2600      	movs	r6, #0
 8005944:	4d0c      	ldr	r5, [pc, #48]	; (8005978 <__libc_init_array+0x38>)
 8005946:	4c0d      	ldr	r4, [pc, #52]	; (800597c <__libc_init_array+0x3c>)
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	f000 f822 	bl	8005998 <_init>
 8005954:	2600      	movs	r6, #0
 8005956:	4d0a      	ldr	r5, [pc, #40]	; (8005980 <__libc_init_array+0x40>)
 8005958:	4c0a      	ldr	r4, [pc, #40]	; (8005984 <__libc_init_array+0x44>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	08005a30 	.word	0x08005a30
 800597c:	08005a30 	.word	0x08005a30
 8005980:	08005a30 	.word	0x08005a30
 8005984:	08005a34 	.word	0x08005a34

08005988 <memset>:
 8005988:	4603      	mov	r3, r0
 800598a:	4402      	add	r2, r0
 800598c:	4293      	cmp	r3, r2
 800598e:	d100      	bne.n	8005992 <memset+0xa>
 8005990:	4770      	bx	lr
 8005992:	f803 1b01 	strb.w	r1, [r3], #1
 8005996:	e7f9      	b.n	800598c <memset+0x4>

08005998 <_init>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr

080059a4 <_fini>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr
