
SPEEDV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a58  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c08  08006c08  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c08  08006c08  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c08  08006c08  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000020  08006c2c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  08006c2c  00021b20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c48  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  00034c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033e7  00000000  00000000  0003a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142d5  00000000  00000000  0003d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095dda  00000000  00000000  000518cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e76a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fac  00000000  00000000  000e76f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b50 	.word	0x08006b50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08006b50 	.word	0x08006b50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1){
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d112      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10) == 0) count++;
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000eaa:	f001 fcc7 	bl	800283c <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x2c>
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ebc:	6013      	str	r3, [r2, #0]
		else count--;
	}
	//if (count > 100 || count < -100) count = 0;
}
 8000ebe:	e004      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x36>
		else count--;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	2000003c 	.word	0x2000003c
 8000edc:	00000000 	.word	0x00000000

08000ee0 <calculateSpeedPID>:


void calculateSpeedPID ()
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	e = vt - v1Filt;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <calculateSpeedPID+0xe0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe09 	bl	8000b00 <__aeabi_i2f>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <calculateSpeedPID+0xe4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f7ff fd4c 	bl	8000994 <__aeabi_fsub>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <calculateSpeedPID+0xe8>)
 8000f02:	601a      	str	r2, [r3, #0]
	eI += e * 0.002;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <calculateSpeedPID+0xec>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa85 	bl	8000418 <__aeabi_f2d>
 8000f0e:	4604      	mov	r4, r0
 8000f10:	460d      	mov	r5, r1
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <calculateSpeedPID+0xe8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa7e 	bl	8000418 <__aeabi_f2d>
 8000f1c:	a326      	add	r3, pc, #152	; (adr r3, 8000fb8 <calculateSpeedPID+0xd8>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fad1 	bl	80004c8 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff f915 	bl	800015c <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fcd7 	bl	80008ec <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <calculateSpeedPID+0xec>)
 8000f42:	6013      	str	r3, [r2, #0]
//			eI = 80000;
//		}
//	else if(eI<-80000){
//		eI = -80000;
//	}
	u = kp * e + ki * eI;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <calculateSpeedPID+0xf0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <calculateSpeedPID+0xe8>)
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fe2a 	bl	8000ba8 <__aeabi_fmul>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461c      	mov	r4, r3
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <calculateSpeedPID+0xf4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <calculateSpeedPID+0xec>)
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fe20 	bl	8000ba8 <__aeabi_fmul>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fd13 	bl	8000998 <__addsf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff67 	bl	8000e48 <__aeabi_f2iz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <calculateSpeedPID+0xf8>)
 8000f7e:	6013      	str	r3, [r2, #0]

	if(u < 0) dir = 1;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <calculateSpeedPID+0xf8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da03      	bge.n	8000f90 <calculateSpeedPID+0xb0>
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <calculateSpeedPID+0xfc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e003      	b.n	8000f98 <calculateSpeedPID+0xb8>
	else dir = -1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <calculateSpeedPID+0xfc>)
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295
 8000f96:	601a      	str	r2, [r3, #0]
	pwr = abs(u);
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <calculateSpeedPID+0xf8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bfb8      	it	lt
 8000fa0:	425b      	neglt	r3, r3
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <calculateSpeedPID+0x100>)
 8000fa4:	6013      	str	r3, [r2, #0]
	if(pwr > 100) pwr = 100;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <calculateSpeedPID+0x100>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	dd02      	ble.n	8000fb4 <calculateSpeedPID+0xd4>
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <calculateSpeedPID+0x100>)
 8000fb0:	2264      	movs	r2, #100	; 0x64
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fbc:	3f60624d 	.word	0x3f60624d
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000054 	.word	0x20000054
 8000fc8:	2000005c 	.word	0x2000005c
 8000fcc:	20000060 	.word	0x20000060
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000064 	.word	0x20000064
 8000fdc:	20000068 	.word	0x20000068
 8000fe0:	2000006c 	.word	0x2000006c

08000fe4 <setMotor>:
void ControlMotor(int ChannelA, int ChannelB){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100-ChannelA);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100-ChannelB);
}

void setMotor(int dir , int pwmVal){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
//	pwmVal = 100-pwmVal;
	if (dir == 1){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d108      	bne.n	8001006 <setMotor+0x22>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmVal);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <setMotor+0x58>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <setMotor+0x58>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
	  else{
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
		  //ControlMotor(0,0);
	  }
}
 8001004:	e014      	b.n	8001030 <setMotor+0x4c>
	else if (dir == -1){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d108      	bne.n	8001020 <setMotor+0x3c>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <setMotor+0x58>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmVal);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <setMotor+0x58>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800101e:	e007      	b.n	8001030 <setMotor+0x4c>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <setMotor+0x58>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <setMotor+0x58>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000f4 	.word	0x200000f4

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fcea 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f84a 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f9ce 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f000 f9ae 	bl	80013b0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001054:	f000 f8de 	bl	8001214 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001058:	f000 f95c 	bl	8001314 <MX_TIM3_Init>
  MX_ADC1_Init();
 800105c:	f000 f89c 	bl	8001198 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001060:	2108      	movs	r1, #8
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <main+0x74>)
 8001064:	f002 fa00 	bl	8003468 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001068:	210c      	movs	r1, #12
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <main+0x74>)
 800106c:	f002 f9fc 	bl	8003468 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <main+0x78>)
 8001072:	f002 f94f 	bl	8003314 <HAL_TIM_Base_Start_IT>
//  HAL_ADC_Start_DMA(&hadc1, adc_value, 10);
  quisecent = 2.5;
 8001076:	4911      	ldr	r1, [pc, #68]	; (80010bc <main+0x7c>)
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <main+0x80>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_ADC_Start(&hadc1);
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <main+0x84>)
 8001084:	f000 fdd4 	bl	8001c30 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001088:	f003 f852 	bl	8004130 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(speed_control, NULL, &defaultTask_attributes);
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <main+0x88>)
 800108e:	2100      	movs	r1, #0
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <main+0x8c>)
 8001092:	f003 f8b3 	bl	80041fc <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <main+0x90>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Current_read, NULL, &myTask02_attributes);
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <main+0x94>)
 800109e:	2100      	movs	r1, #0
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0x98>)
 80010a2:	f003 f8ab 	bl	80041fc <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <main+0x9c>)
 80010aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ac:	f003 f872 	bl	8004194 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <main+0x70>
 80010b2:	bf00      	nop
 80010b4:	200000f4 	.word	0x200000f4
 80010b8:	2000013c 	.word	0x2000013c
 80010bc:	20000078 	.word	0x20000078
 80010c0:	40040000 	.word	0x40040000
 80010c4:	20000080 	.word	0x20000080
 80010c8:	08006ba8 	.word	0x08006ba8
 80010cc:	080014a1 	.word	0x080014a1
 80010d0:	20000184 	.word	0x20000184
 80010d4:	08006bcc 	.word	0x08006bcc
 80010d8:	080014cd 	.word	0x080014cd
 80010dc:	20000188 	.word	0x20000188

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	2228      	movs	r2, #40	; 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fd26 	bl	8006b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800111a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	2302      	movs	r3, #2
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800112e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fbaf 	bl	800289c <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001144:	f000 fa78 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001158:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fe1b 	bl	8002da0 <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001170:	f000 fa62 	bl	8001638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001174:	2302      	movs	r3, #2
 8001176:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f001 ffc2 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800118a:	f000 fa55 	bl	8001638 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_ADC1_Init+0x74>)
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <MX_ADC1_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_ADC1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_ADC1_Init+0x74>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_ADC1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_ADC1_Init+0x74>)
 80011c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_ADC1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_ADC1_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_ADC1_Init+0x74>)
 80011d6:	f000 fc53 	bl	8001a80 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fa2a 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011ec:	2307      	movs	r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_ADC1_Init+0x74>)
 80011f6:	f000 fdc9 	bl	8001d8c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001200:	f000 fa1a 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000080 	.word	0x20000080
 8001210:	40012400 	.word	0x40012400

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001244:	4b32      	ldr	r3, [pc, #200]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_TIM2_Init+0xfc>)
 800124e:	2247      	movs	r2, #71	; 0x47
 8001250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_TIM2_Init+0xfc>)
 800125a:	2263      	movs	r2, #99	; 0x63
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4829      	ldr	r0, [pc, #164]	; (8001310 <MX_TIM2_Init+0xfc>)
 800126c:	f002 f802 	bl	8003274 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001276:	f000 f9df 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001284:	4619      	mov	r1, r3
 8001286:	4822      	ldr	r0, [pc, #136]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001288:	f002 fb56 	bl	8003938 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001292:	f000 f9d1 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001296:	481e      	ldr	r0, [pc, #120]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001298:	f002 f88e 	bl	80033b8 <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012a2:	f000 f9c9 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4619      	mov	r1, r3
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <MX_TIM2_Init+0xfc>)
 80012b6:	f002 fecb 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012c0:	f000 f9ba 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2208      	movs	r2, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM2_Init+0xfc>)
 80012dc:	f002 fa6e 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012e6:	f000 f9a7 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	220c      	movs	r2, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM2_Init+0xfc>)
 80012f2:	f002 fa63 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80012fc:	f000 f99c 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM2_Init+0xfc>)
 8001302:	f000 fa77 	bl	80017f4 <HAL_TIM_MspPostInit>

}
 8001306:	bf00      	nop
 8001308:	3738      	adds	r7, #56	; 0x38
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000f4 	.word	0x200000f4

08001314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <MX_TIM3_Init+0x98>)
 8001334:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001338:	2247      	movs	r2, #71	; 0x47
 800133a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_TIM3_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001344:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001348:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_TIM3_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001358:	f001 ff8c 	bl	8003274 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 f969 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001374:	f002 fae0 	bl	8003938 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 f95b 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_TIM3_Init+0x94>)
 8001390:	f002 fe5e 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800139a:	f000 f94d 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000013c 	.word	0x2000013c
 80013ac:	40000400 	.word	0x40000400

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_DMA_Init+0x38>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_DMA_Init+0x38>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_DMA_Init+0x38>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	200b      	movs	r0, #11
 80013d4:	f000 ff23 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d8:	200b      	movs	r0, #11
 80013da:	f000 ff3c 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001406:	f043 0320 	orr.w	r3, r3, #32
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_GPIO_Init+0xa8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_GPIO_Init+0xa8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <MX_GPIO_Init+0xa8>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_GPIO_Init+0xa8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_GPIO_Init+0xac>)
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <MX_GPIO_Init+0xb0>)
 800145c:	f001 f86a 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <MX_GPIO_Init+0xb0>)
 8001476:	f001 f85d 	bl	8002534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2105      	movs	r1, #5
 800147e:	2007      	movs	r0, #7
 8001480:	f000 fecd 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001484:	2007      	movs	r0, #7
 8001486:	f000 fee6 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	10110000 	.word	0x10110000
 800149c:	40010c00 	.word	0x40010c00

080014a0 <speed_control>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_speed_control */
void speed_control(void *argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	 	  if (emergence == 0){
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <speed_control+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <speed_control+0x1e>
	 		  calculateSpeedPID();
 80014b0:	f7ff fd16 	bl	8000ee0 <calculateSpeedPID>
	 		  setMotor(1, 10);
 80014b4:	210a      	movs	r1, #10
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fd94 	bl	8000fe4 <setMotor>
 80014bc:	e7f4      	b.n	80014a8 <speed_control+0x8>
	 	  }
	 	  else{setMotor(1, 0);}
 80014be:	2100      	movs	r1, #0
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fd8f 	bl	8000fe4 <setMotor>
	 	  if (emergence == 0){
 80014c6:	e7ef      	b.n	80014a8 <speed_control+0x8>
 80014c8:	20000070 	.word	0x20000070

080014cc <Current_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Current_read */
void Current_read(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
//	  }
//	  else anti_noise = 0;
//	  if(anti_noise > 2){
//		  emergence = 1;
//		  intial_current = current;
	  osDelay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f002 ff3b 	bl	8004350 <osDelay>
 80014da:	e7fb      	b.n	80014d4 <Current_read+0x8>
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a46      	ldr	r2, [pc, #280]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014f2:	f000 faa9 	bl	8001a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM3) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a44      	ldr	r2, [pc, #272]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d171      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x104>
    HAL_IncTick();
 8001500:	f000 faa2 	bl	8001a48 <HAL_IncTick>
    counter = count;
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a42      	ldr	r2, [pc, #264]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800150a:	6013      	str	r3, [r2, #0]
      	pos = counter - precount;
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a41      	ldr	r2, [pc, #260]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001518:	6013      	str	r3, [r2, #0]
      //	if (dir == -1 && pos < -50) pos += N;
      //	if (dir == 1 && pos > 50) pos -= N;
      	veloc = pos / 0.002;
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ff68 	bl	80003f4 <__aeabi_i2d>
 8001524:	a332      	add	r3, pc, #200	; (adr r3, 80015f0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f8f7 	bl	800071c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff f9d9 	bl	80008ec <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4a38      	ldr	r2, [pc, #224]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800153e:	6013      	str	r3, [r2, #0]
      	v1 = (veloc / (100)) * 60;
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4937      	ldr	r1, [pc, #220]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbe2 	bl	8000d10 <__aeabi_fdiv>
 800154c:	4603      	mov	r3, r0
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb29 	bl	8000ba8 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800155c:	601a      	str	r2, [r3, #0]
      	v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff58 	bl	8000418 <__aeabi_f2d>
 8001568:	a323      	add	r3, pc, #140	; (adr r3, 80015f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe ffab 	bl	80004c8 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff4a 	bl	8000418 <__aeabi_f2d>
 8001584:	a31e      	add	r3, pc, #120	; (adr r3, 8001600 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe ff9d 	bl	80004c8 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fde1 	bl	800015c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4614      	mov	r4, r2
 80015a0:	461d      	mov	r5, r3
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff36 	bl	8000418 <__aeabi_f2d>
 80015ac:	a314      	add	r3, pc, #80	; (adr r3, 8001600 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe ff89 	bl	80004c8 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7fe fdcd 	bl	800015c <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff f98f 	bl	80008ec <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80015d2:	6013      	str	r3, [r2, #0]
      	v1Prev = v1;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a16      	ldr	r2, [pc, #88]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80015da:	6013      	str	r3, [r2, #0]
      	precount = counter;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015e2:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015f4:	3f60624d 	.word	0x3f60624d
 80015f8:	ced91687 	.word	0xced91687
 80015fc:	3feb53f7 	.word	0x3feb53f7
 8001600:	532617c2 	.word	0x532617c2
 8001604:	3fb2a305 	.word	0x3fb2a305
 8001608:	40000800 	.word	0x40000800
 800160c:	40000400 	.word	0x40000400
 8001610:	2000003c 	.word	0x2000003c
 8001614:	20000040 	.word	0x20000040
 8001618:	20000048 	.word	0x20000048
 800161c:	20000044 	.word	0x20000044
 8001620:	2000004c 	.word	0x2000004c
 8001624:	42c80000 	.word	0x42c80000
 8001628:	42700000 	.word	0x42700000
 800162c:	20000050 	.word	0x20000050
 8001630:	20000054 	.word	0x20000054
 8001634:	20000058 	.word	0x20000058

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_MspInit+0x68>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <HAL_MspInit+0x68>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_MspInit+0x68>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_MspInit+0x68>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_MspInit+0x68>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_MspInit+0x68>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	210f      	movs	r1, #15
 800167e:	f06f 0001 	mvn.w	r0, #1
 8001682:	f000 fdcc 	bl	800221e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_MspInit+0x6c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_MspInit+0x6c>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000

080016b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_ADC_MspInit+0xbc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d149      	bne.n	8001768 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a26      	ldr	r2, [pc, #152]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_ADC_MspInit+0xc0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001708:	2303      	movs	r3, #3
 800170a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4819      	ldr	r0, [pc, #100]	; (8001778 <HAL_ADC_MspInit+0xc4>)
 8001714:	f000 ff0e 	bl	8002534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_ADC_MspInit+0xc8>)
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_ADC_MspInit+0xcc>)
 800171c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_ADC_MspInit+0xc8>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_ADC_MspInit+0xc8>)
 800173a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001742:	2220      	movs	r2, #32
 8001744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_ADC_MspInit+0xc8>)
 800174e:	f000 fd91 	bl	8002274 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001758:	f7ff ff6e 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001760:	621a      	str	r2, [r3, #32]
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_ADC_MspInit+0xc8>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40012400 	.word	0x40012400
 8001774:	40021000 	.word	0x40021000
 8001778:	40010800 	.word	0x40010800
 800177c:	200000b0 	.word	0x200000b0
 8001780:	40020008 	.word	0x40020008

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001794:	d10c      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ae:	e018      	b.n	80017e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0x68>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	201d      	movs	r0, #29
 80017d8:	f000 fd21 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 fd3a 	bl	8002256 <HAL_NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40000400 	.word	0x40000400

080017f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001812:	d117      	bne.n	8001844 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_MspPostInit+0x58>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_MspPostInit+0x58>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_MspPostInit+0x58>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182c:	230c      	movs	r3, #12
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <HAL_TIM_MspPostInit+0x5c>)
 8001840:	f000 fe78 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	40010800 	.word	0x40010800

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_InitTick+0xe8>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a33      	ldr	r2, [pc, #204]	; (800193c <HAL_InitTick+0xe8>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_InitTick+0xe8>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fbed 	bl	800306c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800189c:	f001 fbd2 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80018a0:	6378      	str	r0, [r7, #52]	; 0x34
 80018a2:	e004      	b.n	80018ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018a4:	f001 fbce 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_InitTick+0xec>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	3b01      	subs	r3, #1
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_InitTick+0xf0>)
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <HAL_InitTick+0xf4>)
 80018c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_InitTick+0xf0>)
 80018c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_InitTick+0xf0>)
 80018cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_InitTick+0xf0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_InitTick+0xf0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_InitTick+0xf0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018e2:	4818      	ldr	r0, [pc, #96]	; (8001944 <HAL_InitTick+0xf0>)
 80018e4:	f001 fcc6 	bl	8003274 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11b      	bne.n	800192e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80018f6:	4813      	ldr	r0, [pc, #76]	; (8001944 <HAL_InitTick+0xf0>)
 80018f8:	f001 fd0c 	bl	8003314 <HAL_TIM_Base_Start_IT>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001906:	2b00      	cmp	r3, #0
 8001908:	d111      	bne.n	800192e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800190a:	201e      	movs	r0, #30
 800190c:	f000 fca3 	bl	8002256 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d808      	bhi.n	8001928 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	201e      	movs	r0, #30
 800191c:	f000 fc7f 	bl	800221e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_InitTick+0xf8>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e002      	b.n	800192e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800192e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001932:	4618      	mov	r0, r3
 8001934:	3738      	adds	r7, #56	; 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	431bde83 	.word	0x431bde83
 8001944:	2000018c 	.word	0x2000018c
 8001948:	40000800 	.word	0x40000800
 800194c:	20000010 	.word	0x20000010

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800197e:	2002      	movs	r0, #2
 8001980:	f000 ff74 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Channel1_IRQHandler+0x10>)
 800198e:	f000 fccb 	bl	8002328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000b0 	.word	0x200000b0

0800199c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM3_IRQHandler+0x10>)
 80019a2:	f001 fe03 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000013c 	.word	0x2000013c

080019b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <TIM4_IRQHandler+0x10>)
 80019b6:	f001 fdf9 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000018c 	.word	0x2000018c

080019c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	; (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019f6:	f7ff ffe5 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f005 f86f 	bl	8006adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff fb1f 	bl	8001040 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a0c:	08006c10 	.word	0x08006c10
  ldr r2, =_sbss
 8001a10:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a14:	20001b20 	.word	0x20001b20

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 fbeb 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f7ff ff0e 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fe04 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x1c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x20>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_IncTick+0x20>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000014 	.word	0x20000014
 8001a68:	200001d4 	.word	0x200001d4

08001a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <HAL_GetTick+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	200001d4 	.word	0x200001d4

08001a80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0be      	b.n	8001c20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fdf8 	bl	80016b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fab3 	bl	8002030 <ADC_ConversionStop_Disable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8099 	bne.w	8001c0e <HAL_ADC_Init+0x18e>
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8095 	bne.w	8001c0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aec:	f023 0302 	bic.w	r3, r3, #2
 8001af0:	f043 0202 	orr.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
 8001b06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_Init+0xa2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_ADC_Init+0xa8>
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	e000      	b.n	8001b2a <HAL_ADC_Init+0xaa>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7d1b      	ldrb	r3, [r3, #20]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d119      	bne.n	8001b6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	035a      	lsls	r2, r3, #13
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e00b      	b.n	8001b6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_ADC_Init+0x1a8>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d003      	beq.n	8001ba6 <HAL_ADC_Init+0x126>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d104      	bne.n	8001bb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	051b      	lsls	r3, r3, #20
 8001bae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_ADC_Init+0x1ac>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10b      	bne.n	8001bec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bea:	e018      	b.n	8001c1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f023 0312 	bic.w	r3, r3, #18
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	ffe1f7fd 	.word	0xffe1f7fd
 8001c2c:	ff1f0efe 	.word	0xff1f0efe

08001c30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Start+0x1a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e098      	b.n	8001d7c <HAL_ADC_Start+0x14c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f992 	bl	8001f7c <ADC_Enable>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8087 	bne.w	8001d72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_ADC_Start+0x154>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d105      	bne.n	8001c8e <HAL_ADC_Start+0x5e>
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_ADC_Start+0x158>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d026      	beq.n	8001cf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cb8:	e01d      	b.n	8001cf6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <HAL_ADC_Start+0x158>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Start+0xaa>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_ADC_Start+0x154>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_ADC_Start+0xc6>
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_ADC_Start+0x158>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	f023 0206 	bic.w	r2, r3, #6
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0e:	e002      	b.n	8001d16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0202 	mvn.w	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d36:	d113      	bne.n	8001d60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_ADC_Start+0x154>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_ADC_Start+0x158>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	e00c      	b.n	8001d7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40012800 	.word	0x40012800
 8001d88:	40012400 	.word	0x40012400

08001d8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x20>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0dc      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1da>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d81c      	bhi.n	8001df6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b05      	subs	r3, #5
 8001dce:	221f      	movs	r2, #31
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4019      	ands	r1, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b05      	subs	r3, #5
 8001de8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34
 8001df4:	e03c      	b.n	8001e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d81c      	bhi.n	8001e38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b23      	subs	r3, #35	; 0x23
 8001e10:	221f      	movs	r2, #31
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	4019      	ands	r1, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b23      	subs	r3, #35	; 0x23
 8001e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
 8001e36:	e01b      	b.n	8001e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b41      	subs	r3, #65	; 0x41
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4019      	ands	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b41      	subs	r3, #65	; 0x41
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d91c      	bls.n	8001eb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6898      	ldr	r0, [r3, #8]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	e019      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6919      	ldr	r1, [r3, #16]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4019      	ands	r1, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6898      	ldr	r0, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ef2:	2b11      	cmp	r3, #17
 8001ef4:	d132      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_ADC_ConfigChannel+0x1e4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d125      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d126      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d11a      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9a      	lsrs	r2, r3, #18
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x1b2>
 8001f4a:	e007      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40012400 	.word	0x40012400
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d040      	beq.n	800201c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <ADC_Enable+0xac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <ADC_Enable+0xb0>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	0c9b      	lsrs	r3, r3, #18
 8001fb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fb8:	e002      	b.n	8001fc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fc6:	f7ff fd51 	bl	8001a6c <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fcc:	e01f      	b.n	800200e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fce:	f7ff fd4d 	bl	8001a6c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d918      	bls.n	800200e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d011      	beq.n	800200e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e007      	b.n	800201e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d1d8      	bne.n	8001fce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c
 800202c:	431bde83 	.word	0x431bde83

08002030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12e      	bne.n	80020a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff fd07 	bl	8001a6c <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002060:	e01b      	b.n	800209a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002062:	f7ff fd03 	bl	8001a6c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d914      	bls.n	800209a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e007      	b.n	80020aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d0dc      	beq.n	8002062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <__NVIC_EnableIRQ+0x34>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff4f 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff64 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ffb2 	bl	80021a4 <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff81 	bl	8002150 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff57 	bl	8002118 <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e043      	b.n	8002312 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_DMA_Init+0xa8>)
 8002292:	4413      	add	r3, r2
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_DMA_Init+0xac>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	009a      	lsls	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_DMA_Init+0xb0>)
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	bffdfff8 	.word	0xbffdfff8
 8002320:	cccccccd 	.word	0xcccccccd
 8002324:	40020000 	.word	0x40020000

08002328 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d04f      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xc8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04a      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a66      	ldr	r2, [pc, #408]	; (8002518 <HAL_DMA_IRQHandler+0x1f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d029      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xae>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_DMA_IRQHandler+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xaa>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HAL_DMA_IRQHandler+0x1f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0xa4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a62      	ldr	r2, [pc, #392]	; (8002524 <HAL_DMA_IRQHandler+0x1fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d012      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x9e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_DMA_IRQHandler+0x200>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x98>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_DMA_IRQHandler+0x204>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_DMA_IRQHandler+0x92>
 80023b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023b8:	e00e      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023be:	e00b      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023c4:	e008      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ca:	e005      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d0:	e002      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023d2:	2340      	movs	r3, #64	; 0x40
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0xb0>
 80023d6:	2304      	movs	r3, #4
 80023d8:	4a55      	ldr	r2, [pc, #340]	; (8002530 <HAL_DMA_IRQHandler+0x208>)
 80023da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8094 	beq.w	800250e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023ee:	e08e      	b.n	800250e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2202      	movs	r2, #2
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d056      	beq.n	80024ae <HAL_DMA_IRQHandler+0x186>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d051      	beq.n	80024ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10b      	bne.n	8002430 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020a 	bic.w	r2, r2, #10
 8002426:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_DMA_IRQHandler+0x1f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d029      	beq.n	800248e <HAL_DMA_IRQHandler+0x166>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a37      	ldr	r2, [pc, #220]	; (800251c <HAL_DMA_IRQHandler+0x1f4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_IRQHandler+0x162>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a35      	ldr	r2, [pc, #212]	; (8002520 <HAL_DMA_IRQHandler+0x1f8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01a      	beq.n	8002484 <HAL_DMA_IRQHandler+0x15c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_DMA_IRQHandler+0x1fc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d012      	beq.n	800247e <HAL_DMA_IRQHandler+0x156>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_DMA_IRQHandler+0x200>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00a      	beq.n	8002478 <HAL_DMA_IRQHandler+0x150>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_DMA_IRQHandler+0x204>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d102      	bne.n	8002472 <HAL_DMA_IRQHandler+0x14a>
 800246c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002470:	e00e      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 8002472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002476:	e00b      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 8002478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247c:	e008      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 800247e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002482:	e005      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 8002484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002488:	e002      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 800248a:	2320      	movs	r3, #32
 800248c:	e000      	b.n	8002490 <HAL_DMA_IRQHandler+0x168>
 800248e:	2302      	movs	r3, #2
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <HAL_DMA_IRQHandler+0x208>)
 8002492:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d034      	beq.n	800250e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ac:	e02f      	b.n	800250e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d028      	beq.n	8002510 <HAL_DMA_IRQHandler+0x1e8>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 020e 	bic.w	r2, r2, #14
 80024d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4798      	blx	r3
    }
  }
  return;
 800250e:	bf00      	nop
 8002510:	bf00      	nop
}
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40020008 	.word	0x40020008
 800251c:	4002001c 	.word	0x4002001c
 8002520:	40020030 	.word	0x40020030
 8002524:	40020044 	.word	0x40020044
 8002528:	40020058 	.word	0x40020058
 800252c:	4002006c 	.word	0x4002006c
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	; 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e169      	b.n	800281c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002548:	2201      	movs	r2, #1
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8158 	bne.w	8002816 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a9a      	ldr	r2, [pc, #616]	; (80027d4 <HAL_GPIO_Init+0x2a0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002570:	4a98      	ldr	r2, [pc, #608]	; (80027d4 <HAL_GPIO_Init+0x2a0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d875      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002576:	4a98      	ldr	r2, [pc, #608]	; (80027d8 <HAL_GPIO_Init+0x2a4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d058      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 800257c:	4a96      	ldr	r2, [pc, #600]	; (80027d8 <HAL_GPIO_Init+0x2a4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d86f      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002582:	4a96      	ldr	r2, [pc, #600]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d052      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002588:	4a94      	ldr	r2, [pc, #592]	; (80027dc <HAL_GPIO_Init+0x2a8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d869      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800258e:	4a94      	ldr	r2, [pc, #592]	; (80027e0 <HAL_GPIO_Init+0x2ac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04c      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002594:	4a92      	ldr	r2, [pc, #584]	; (80027e0 <HAL_GPIO_Init+0x2ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d863      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800259a:	4a92      	ldr	r2, [pc, #584]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d046      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 80025a0:	4a90      	ldr	r2, [pc, #576]	; (80027e4 <HAL_GPIO_Init+0x2b0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d85d      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d82a      	bhi.n	8002600 <HAL_GPIO_Init+0xcc>
 80025aa:	2b12      	cmp	r3, #18
 80025ac:	d859      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_GPIO_Init+0x80>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	0800262f 	.word	0x0800262f
 80025b8:	08002609 	.word	0x08002609
 80025bc:	0800261b 	.word	0x0800261b
 80025c0:	0800265d 	.word	0x0800265d
 80025c4:	08002663 	.word	0x08002663
 80025c8:	08002663 	.word	0x08002663
 80025cc:	08002663 	.word	0x08002663
 80025d0:	08002663 	.word	0x08002663
 80025d4:	08002663 	.word	0x08002663
 80025d8:	08002663 	.word	0x08002663
 80025dc:	08002663 	.word	0x08002663
 80025e0:	08002663 	.word	0x08002663
 80025e4:	08002663 	.word	0x08002663
 80025e8:	08002663 	.word	0x08002663
 80025ec:	08002663 	.word	0x08002663
 80025f0:	08002663 	.word	0x08002663
 80025f4:	08002663 	.word	0x08002663
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002625 	.word	0x08002625
 8002600:	4a79      	ldr	r2, [pc, #484]	; (80027e8 <HAL_GPIO_Init+0x2b4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002606:	e02c      	b.n	8002662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	623b      	str	r3, [r7, #32]
          break;
 800260e:	e029      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	3304      	adds	r3, #4
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e024      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	3308      	adds	r3, #8
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e01f      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	330c      	adds	r3, #12
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e01a      	b.n	8002664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002636:	2304      	movs	r3, #4
 8002638:	623b      	str	r3, [r7, #32]
          break;
 800263a:	e013      	b.n	8002664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002644:	2308      	movs	r3, #8
 8002646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	611a      	str	r2, [r3, #16]
          break;
 800264e:	e009      	b.n	8002664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	615a      	str	r2, [r3, #20]
          break;
 800265a:	e003      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x130>
          break;
 8002662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	d801      	bhi.n	800266e <HAL_GPIO_Init+0x13a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_Init+0x13e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d802      	bhi.n	8002680 <HAL_GPIO_Init+0x14c>
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x152>
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3b08      	subs	r3, #8
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	210f      	movs	r1, #15
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80b1 	beq.w	8002816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b4:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <HAL_GPIO_Init+0x2b8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_GPIO_Init+0x2b8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_GPIO_Init+0x2b8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026cc:	4a48      	ldr	r2, [pc, #288]	; (80027f0 <HAL_GPIO_Init+0x2bc>)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a40      	ldr	r2, [pc, #256]	; (80027f4 <HAL_GPIO_Init+0x2c0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_GPIO_Init+0x1ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <HAL_GPIO_Init+0x2c4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00d      	beq.n	800271c <HAL_GPIO_Init+0x1e8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3e      	ldr	r2, [pc, #248]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <HAL_GPIO_Init+0x1e4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3d      	ldr	r2, [pc, #244]	; (8002800 <HAL_GPIO_Init+0x2cc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_GPIO_Init+0x1e0>
 8002710:	2303      	movs	r3, #3
 8002712:	e006      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002714:	2304      	movs	r3, #4
 8002716:	e004      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002718:	2302      	movs	r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002720:	2300      	movs	r3, #0
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002732:	492f      	ldr	r1, [pc, #188]	; (80027f0 <HAL_GPIO_Init+0x2bc>)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	492c      	ldr	r1, [pc, #176]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	43db      	mvns	r3, r3
 8002762:	4928      	ldr	r1, [pc, #160]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 8002764:	4013      	ands	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	43db      	mvns	r3, r3
 800278a:	491e      	ldr	r1, [pc, #120]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4918      	ldr	r1, [pc, #96]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4914      	ldr	r1, [pc, #80]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d021      	beq.n	8002808 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60cb      	str	r3, [r1, #12]
 80027d0:	e021      	b.n	8002816 <HAL_GPIO_Init+0x2e2>
 80027d2:	bf00      	nop
 80027d4:	10320000 	.word	0x10320000
 80027d8:	10310000 	.word	0x10310000
 80027dc:	10220000 	.word	0x10220000
 80027e0:	10210000 	.word	0x10210000
 80027e4:	10120000 	.word	0x10120000
 80027e8:	10110000 	.word	0x10110000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40010800 	.word	0x40010800
 80027f8:	40010c00 	.word	0x40010c00
 80027fc:	40011000 	.word	0x40011000
 8002800:	40011400 	.word	0x40011400
 8002804:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_GPIO_Init+0x304>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	43db      	mvns	r3, r3
 8002810:	4909      	ldr	r1, [pc, #36]	; (8002838 <HAL_GPIO_Init+0x304>)
 8002812:	4013      	ands	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	3301      	adds	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f47f ae8e 	bne.w	8002548 <HAL_GPIO_Init+0x14>
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	372c      	adds	r7, #44	; 0x2c
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e001      	b.n	800285e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fb02 	bl	8000e94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010400 	.word	0x40010400

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e272      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8087 	beq.w	80029ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c8:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d112      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
 80028d4:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d10b      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d06c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x12c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d168      	bne.n	80029c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e24c      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x76>
 8002904:	4b80      	ldr	r3, [pc, #512]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7f      	ldr	r2, [pc, #508]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0xbc>
 800293e:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a71      	ldr	r2, [pc, #452]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002958:	4b6b      	ldr	r3, [pc, #428]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff f878 	bl	8001a6c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff f874 	bl	8001a6c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e200      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xe4>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff f864 	bl	8001a6c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f860 	bl	8001a6c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1ec      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x10c>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d11c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1c0      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4939      	ldr	r1, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e03a      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff f819 	bl	8001a6c <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7ff f815 	bl	8001a6c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1a1      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fff8 	bl	8001a6c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe fff4 	bl	8001a6c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e180      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03a      	beq.n	8002b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe ffd8 	bl	8001a6c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fe ffd4 	bl	8001a6c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e160      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f000 faf4 	bl	80030cc <RCC_Delay>
 8002ae4:	e01c      	b.n	8002b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7fe ffbe 	bl	8001a6c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af2:	e00f      	b.n	8002b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe ffba 	bl	8001a6c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d908      	bls.n	8002b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e146      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	42420000 	.word	0x42420000
 8002b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b92      	ldr	r3, [pc, #584]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e9      	bne.n	8002af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a6 	beq.w	8002c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a87      	ldr	r2, [pc, #540]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	61d3      	str	r3, [r2, #28]
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b7f      	ldr	r3, [pc, #508]	; (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	; (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe ff7b 	bl	8001a6c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe ff77 	bl	8001a6c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e103      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x312>
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x334>
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6213      	str	r3, [r2, #32]
 8002bce:	e01c      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x356>
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a60      	ldr	r2, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6213      	str	r3, [r2, #32]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a5a      	ldr	r2, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fe ff2b 	bl	8001a6c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe ff27 	bl	8001a6c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0b1      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <HAL_RCC_OscConfig+0x37e>
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe ff15 	bl	8001a6c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe ff11 	bl	8001a6c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e09b      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8087 	beq.w	8002d92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d061      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d146      	bne.n	8002d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fee5 	bl	8001a6c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fee1 	bl	8001a6c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e06d      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4921      	ldr	r1, [pc, #132]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a19      	ldr	r1, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	491b      	ldr	r1, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe feb5 	bl	8001a6c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe feb1 	bl	8001a6c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e03d      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46a>
 8002d24:	e035      	b.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fe9e 	bl	8001a6c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fe9a 	bl	8001a6c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e026      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x498>
 8002d52:	e01e      	b.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e019      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x500>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4965      	ldr	r1, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fdec 	bl	8001a6c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fde8 	bl	8001a6c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4922      	ldr	r1, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1cc>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fc80 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08006bf0 	.word	0x08006bf0
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	20000010 	.word	0x20000010

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b490      	push	{r4, r7}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f7c:	1d3c      	adds	r4, r7, #4
 8002f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f84:	f240 2301 	movw	r3, #513	; 0x201
 8002f88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x46>
 8002fb2:	e02b      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fb6:	623b      	str	r3, [r7, #32]
      break;
 8002fb8:	e02b      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	0c9b      	lsrs	r3, r3, #18
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3328      	adds	r3, #40	; 0x28
 8002fc4:	443b      	add	r3, r7
 8002fc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	3328      	adds	r3, #40	; 0x28
 8002fe2:	443b      	add	r3, r7
 8002fe4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fee:	fb03 f202 	mul.w	r2, r3, r2
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	e004      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	623b      	str	r3, [r7, #32]
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_GetSysClockFreq+0xb4>)
 800300e:	623b      	str	r3, [r7, #32]
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6a3b      	ldr	r3, [r7, #32]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	; 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc90      	pop	{r4, r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	08006b80 	.word	0x08006b80
 8003024:	40021000 	.word	0x40021000
 8003028:	007a1200 	.word	0x007a1200
 800302c:	003d0900 	.word	0x003d0900

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	2000000c 	.word	0x2000000c

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08006c00 	.word	0x08006c00

0800306c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	220f      	movs	r2, #15
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_GetClockConfig+0x58>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCC_GetClockConfig+0x58>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetClockConfig+0x58>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_RCC_GetClockConfig+0x58>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40022000 	.word	0x40022000

080030cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <RCC_Delay+0x34>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <RCC_Delay+0x38>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0a5b      	lsrs	r3, r3, #9
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030e8:	bf00      	nop
  }
  while (Delay --);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e5a      	subs	r2, r3, #1
 80030ee:	60fa      	str	r2, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <RCC_Delay+0x1c>
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	2000000c 	.word	0x2000000c
 8003104:	10624dd3 	.word	0x10624dd3

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d07d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003128:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	4a4b      	ldr	r2, [pc, #300]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	61d3      	str	r3, [r2, #28]
 8003140:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d118      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315c:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fe fc80 	bl	8001a6c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	e008      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe fc7c 	bl	8001a6c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e06d      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d027      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d014      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fc4b 	bl	8001a6c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe fc47 	bl	8001a6c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e036      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ee      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4917      	ldr	r1, [pc, #92]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	4313      	orrs	r3, r2
 800320c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4a13      	ldr	r2, [pc, #76]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	490b      	ldr	r1, [pc, #44]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4904      	ldr	r1, [pc, #16]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	40007000 	.word	0x40007000
 8003270:	42420440 	.word	0x42420440

08003274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fa72 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fc28 	bl	8003b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e03a      	b.n	80033a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_TIM_Base_Start_IT+0x98>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x58>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d010      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e007      	b.n	80033a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800

080033b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f839 	bl	8003456 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fb86 	bl	8003b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e05e      	b.n	8003598 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fd74 	bl	8004008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_TIM_PWM_Start+0x138>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d107      	bne.n	800353a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_PWM_Start+0x138>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIM_PWM_Start+0xfa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d009      	beq.n	8003562 <HAL_TIM_PWM_Start+0xfa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_TIM_PWM_Start+0x13c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIM_PWM_Start+0xfa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <HAL_TIM_PWM_Start+0x140>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d111      	bne.n	8003586 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d010      	beq.n	8003596 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	e007      	b.n	8003596 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0202 	mvn.w	r2, #2
 80035d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa6f 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa62 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa71 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa45 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa38 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fa47 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0208 	mvn.w	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa1b 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa0e 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa1d 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0210 	mvn.w	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2208      	movs	r2, #8
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9f1 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9e4 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9f3 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fed8 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d10e      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d107      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fce1 	bl	800411e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9b7 	bl	8003af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0220 	mvn.w	r2, #32
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fcac 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e0ac      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x174>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	f200 809f 	bhi.w	8003924 <HAL_TIM_PWM_ConfigChannel+0x168>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	08003821 	.word	0x08003821
 80037f0:	08003925 	.word	0x08003925
 80037f4:	08003925 	.word	0x08003925
 80037f8:	08003925 	.word	0x08003925
 80037fc:	08003861 	.word	0x08003861
 8003800:	08003925 	.word	0x08003925
 8003804:	08003925 	.word	0x08003925
 8003808:	08003925 	.word	0x08003925
 800380c:	080038a3 	.word	0x080038a3
 8003810:	08003925 	.word	0x08003925
 8003814:	08003925 	.word	0x08003925
 8003818:	08003925 	.word	0x08003925
 800381c:	080038e3 	.word	0x080038e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f9d0 	bl	8003bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6999      	ldr	r1, [r3, #24]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	619a      	str	r2, [r3, #24]
      break;
 800385e:	e062      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa16 	bl	8003c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6999      	ldr	r1, [r3, #24]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	619a      	str	r2, [r3, #24]
      break;
 80038a0:	e041      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fa5f 	bl	8003d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0208 	orr.w	r2, r2, #8
 80038bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0204 	bic.w	r2, r2, #4
 80038cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69d9      	ldr	r1, [r3, #28]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	61da      	str	r2, [r3, #28]
      break;
 80038e0:	e021      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 faa9 	bl	8003e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69d9      	ldr	r1, [r3, #28]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	021a      	lsls	r2, r3, #8
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	61da      	str	r2, [r3, #28]
      break;
 8003922:	e000      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIM_ConfigClockSource+0x18>
 800394c:	2302      	movs	r3, #2
 800394e:	e0b3      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x180>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800396e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003988:	d03e      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0xd0>
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398e:	f200 8087 	bhi.w	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	f000 8085 	beq.w	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d87f      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039a0:	2b70      	cmp	r3, #112	; 0x70
 80039a2:	d01a      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xa2>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d87b      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039a8:	2b60      	cmp	r3, #96	; 0x60
 80039aa:	d050      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x116>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d877      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039b0:	2b50      	cmp	r3, #80	; 0x50
 80039b2:	d03c      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xf6>
 80039b4:	2b50      	cmp	r3, #80	; 0x50
 80039b6:	d873      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d058      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0x136>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d86f      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d064      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x156>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d86b      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d060      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x156>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d867      	bhi.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d05c      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x156>
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d05a      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039d8:	e062      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f000 faee 	bl	8003fca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	609a      	str	r2, [r3, #8]
      break;
 8003a06:	e04e      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6899      	ldr	r1, [r3, #8]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f000 fad7 	bl	8003fca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2a:	609a      	str	r2, [r3, #8]
      break;
 8003a2c:	e03b      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f000 fa4e 	bl	8003edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2150      	movs	r1, #80	; 0x50
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 faa5 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003a4c:	e02b      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f000 fa6c 	bl	8003f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2160      	movs	r1, #96	; 0x60
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fa95 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003a6c:	e01b      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 fa2e 	bl	8003edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fa85 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003a8c:	e00b      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f000 fa7c 	bl	8003f96 <TIM_ITRx_SetConfig>
        break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <TIM_Base_SetConfig+0xb8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_Base_SetConfig+0x30>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d007      	beq.n	8003b38 <TIM_Base_SetConfig+0x30>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <TIM_Base_SetConfig+0xbc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0x30>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <TIM_Base_SetConfig+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d108      	bne.n	8003b4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <TIM_Base_SetConfig+0xb8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x62>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_Base_SetConfig+0xbc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <TIM_Base_SetConfig+0xc0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <TIM_Base_SetConfig+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800

08003bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <TIM_OC1_SetConfig+0xc8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10c      	bne.n	8003c42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0308 	bic.w	r3, r3, #8
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <TIM_OC1_SetConfig+0xc8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d111      	bne.n	8003c6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00

08003c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0210 	bic.w	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0320 	bic.w	r3, r3, #32
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <TIM_OC2_SetConfig+0xd0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10d      	bne.n	8003d14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC2_SetConfig+0xd0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d113      	bne.n	8003d44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00

08003d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <TIM_OC3_SetConfig+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10d      	bne.n	8003de6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <TIM_OC3_SetConfig+0xd0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d113      	bne.n	8003e16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00

08003e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	031b      	lsls	r3, r3, #12
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <TIM_OC4_SetConfig+0x98>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d109      	bne.n	8003eb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40012c00 	.word	0x40012c00

08003edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 030a 	bic.w	r3, r3, #10
 8003f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0210 	bic.w	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	031b      	lsls	r3, r3, #12
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f043 0307 	orr.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	021a      	lsls	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e046      	b.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d009      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10c      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004136:	f3ef 8305 	mrs	r3, IPSR
 800413a:	60bb      	str	r3, [r7, #8]
  return(result);
 800413c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10f      	bne.n	8004162 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004142:	f3ef 8310 	mrs	r3, PRIMASK
 8004146:	607b      	str	r3, [r7, #4]
  return(result);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <osKernelInitialize+0x32>
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <osKernelInitialize+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d109      	bne.n	800416a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004156:	f3ef 8311 	mrs	r3, BASEPRI
 800415a:	603b      	str	r3, [r7, #0]
  return(result);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004162:	f06f 0305 	mvn.w	r3, #5
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e00c      	b.n	8004184 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <osKernelInitialize+0x60>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <osKernelInitialize+0x60>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e002      	b.n	8004184 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	200001d8 	.word	0x200001d8

08004194 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800419a:	f3ef 8305 	mrs	r3, IPSR
 800419e:	60bb      	str	r3, [r7, #8]
  return(result);
 80041a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a6:	f3ef 8310 	mrs	r3, PRIMASK
 80041aa:	607b      	str	r3, [r7, #4]
  return(result);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <osKernelStart+0x32>
 80041b2:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <osKernelStart+0x64>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d109      	bne.n	80041ce <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ba:	f3ef 8311 	mrs	r3, BASEPRI
 80041be:	603b      	str	r3, [r7, #0]
  return(result);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80041c6:	f06f 0305 	mvn.w	r3, #5
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e00e      	b.n	80041ec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <osKernelStart+0x64>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <osKernelStart+0x64>)
 80041d8:	2202      	movs	r2, #2
 80041da:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80041dc:	f001 f878 	bl	80052d0 <vTaskStartScheduler>
      stat = osOK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e002      	b.n	80041ec <osKernelStart+0x58>
    } else {
      stat = osError;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041ec:	68fb      	ldr	r3, [r7, #12]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200001d8 	.word	0x200001d8

080041fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b092      	sub	sp, #72	; 0x48
 8004200:	af04      	add	r7, sp, #16
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800420c:	f3ef 8305 	mrs	r3, IPSR
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8094 	bne.w	8004342 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421a:	f3ef 8310 	mrs	r3, PRIMASK
 800421e:	623b      	str	r3, [r7, #32]
  return(result);
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 808d 	bne.w	8004342 <osThreadNew+0x146>
 8004228:	4b48      	ldr	r3, [pc, #288]	; (800434c <osThreadNew+0x150>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d106      	bne.n	800423e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004230:	f3ef 8311 	mrs	r3, BASEPRI
 8004234:	61fb      	str	r3, [r7, #28]
  return(result);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 8082 	bne.w	8004342 <osThreadNew+0x146>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d07e      	beq.n	8004342 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004248:	2318      	movs	r3, #24
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800424c:	2300      	movs	r3, #0
 800424e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004250:	f107 031b 	add.w	r3, r7, #27
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d045      	beq.n	80042ee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <osThreadNew+0x74>
        name = attr->name;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <osThreadNew+0x9a>
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b38      	cmp	r3, #56	; 0x38
 8004288:	d805      	bhi.n	8004296 <osThreadNew+0x9a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <osThreadNew+0x9e>
        return (NULL);
 8004296:	2300      	movs	r3, #0
 8004298:	e054      	b.n	8004344 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <osThreadNew+0xd4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b5b      	cmp	r3, #91	; 0x5b
 80042b8:	d90a      	bls.n	80042d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <osThreadNew+0xd4>
        mem = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	e010      	b.n	80042f2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10c      	bne.n	80042f2 <osThreadNew+0xf6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <osThreadNew+0xf6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <osThreadNew+0xf6>
          mem = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ec:	e001      	b.n	80042f2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d110      	bne.n	800431a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004300:	9202      	str	r2, [sp, #8]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fe12 	bl	8004f38 <xTaskCreateStatic>
 8004314:	4603      	mov	r3, r0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e013      	b.n	8004342 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d110      	bne.n	8004342 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	b29a      	uxth	r2, r3
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fe5c 	bl	8004ff0 <xTaskCreate>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <osThreadNew+0x146>
          hTask = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004342:	697b      	ldr	r3, [r7, #20]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3738      	adds	r7, #56	; 0x38
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200001d8 	.word	0x200001d8

08004350 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004358:	f3ef 8305 	mrs	r3, IPSR
 800435c:	613b      	str	r3, [r7, #16]
  return(result);
 800435e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10f      	bne.n	8004384 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004364:	f3ef 8310 	mrs	r3, PRIMASK
 8004368:	60fb      	str	r3, [r7, #12]
  return(result);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <osDelay+0x34>
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <osDelay+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d109      	bne.n	800438c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004378:	f3ef 8311 	mrs	r3, BASEPRI
 800437c:	60bb      	str	r3, [r7, #8]
  return(result);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <osDelay+0x3c>
    stat = osErrorISR;
 8004384:	f06f 0305 	mvn.w	r3, #5
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e007      	b.n	800439c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ff66 	bl	8005268 <vTaskDelay>
    }
  }

  return (stat);
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200001d8 	.word	0x200001d8

080043ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <vApplicationGetIdleTaskMemory+0x28>)
 80043bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80043c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	200001dc 	.word	0x200001dc
 80043d8:	20000238 	.word	0x20000238

080043dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <vApplicationGetTimerTaskMemory+0x2c>)
 80043ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4a06      	ldr	r2, [pc, #24]	; (800440c <vApplicationGetTimerTaskMemory+0x30>)
 80043f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043fa:	601a      	str	r2, [r3, #0]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000438 	.word	0x20000438
 800440c:	20000494 	.word	0x20000494

08004410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f103 0208 	add.w	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 0208 	add.w	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f103 0208 	add.w	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e00c      	b.n	80044e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3308      	adds	r3, #8
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e002      	b.n	80044da <vListInsert+0x2e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d2f6      	bcs.n	80044d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d103      	bne.n	8004550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
	...

08004570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800459a:	f001 ffc7 	bl	800652c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	3b01      	subs	r3, #1
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	22ff      	movs	r2, #255	; 0xff
 80045e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d114      	bne.n	800461a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01a      	beq.n	800462e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3310      	adds	r3, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 f8f1 	bl	80057e4 <xTaskRemoveFromEventList>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <xQueueGenericReset+0xcc>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	e009      	b.n	800462e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3310      	adds	r3, #16
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fef6 	bl	8004410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fef1 	bl	8004410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800462e:	f001 ffad 	bl	800658c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004632:	2301      	movs	r3, #1
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	; 0x38
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <xQueueGenericCreateStatic+0x52>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <xQueueGenericCreateStatic+0x56>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericCreateStatic+0x58>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	623b      	str	r3, [r7, #32]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <xQueueGenericCreateStatic+0x7e>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xQueueGenericCreateStatic+0x82>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueGenericCreateStatic+0x84>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	61fb      	str	r3, [r7, #28]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046de:	2350      	movs	r3, #80	; 0x50
 80046e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d00a      	beq.n	80046fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	61bb      	str	r3, [r7, #24]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004710:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f805 	bl	800472e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004726:	4618      	mov	r0, r3
 8004728:	3730      	adds	r7, #48	; 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e002      	b.n	8004750 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800475c:	2101      	movs	r1, #1
 800475e:	69b8      	ldr	r0, [r7, #24]
 8004760:	f7ff ff06 	bl	8004570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xQueueGenericSend+0x32>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <xQueueGenericSend+0x40>
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <xQueueGenericSend+0x44>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <xQueueGenericSend+0x46>
 80047b8:	2300      	movs	r3, #0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <xQueueGenericSend+0x60>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d103      	bne.n	80047e2 <xQueueGenericSend+0x6e>
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <xQueueGenericSend+0x72>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <xQueueGenericSend+0x74>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <xQueueGenericSend+0x8e>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	623b      	str	r3, [r7, #32]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004802:	f001 f9b1 	bl	8005b68 <xTaskGetSchedulerState>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <xQueueGenericSend+0x9e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <xQueueGenericSend+0xa2>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <xQueueGenericSend+0xa4>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xQueueGenericSend+0xbe>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	61fb      	str	r3, [r7, #28]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004832:	f001 fe7b 	bl	800652c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <xQueueGenericSend+0xd4>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d129      	bne.n	800489c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484e:	f000 fa07 	bl	8004c60 <prvCopyDataToQueue>
 8004852:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	3324      	adds	r3, #36	; 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f000 ffbf 	bl	80057e4 <xTaskRemoveFromEventList>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800486c:	4b3f      	ldr	r3, [pc, #252]	; (800496c <xQueueGenericSend+0x1f8>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e00a      	b.n	8004894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004884:	4b39      	ldr	r3, [pc, #228]	; (800496c <xQueueGenericSend+0x1f8>)
 8004886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004894:	f001 fe7a 	bl	800658c <vPortExitCritical>
				return pdPASS;
 8004898:	2301      	movs	r3, #1
 800489a:	e063      	b.n	8004964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048a2:	f001 fe73 	bl	800658c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e05c      	b.n	8004964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fff9 	bl	80058ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048be:	f001 fe65 	bl	800658c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048c2:	f000 fd6b 	bl	800539c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048c6:	f001 fe31 	bl	800652c <vPortEnterCritical>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d0:	b25b      	sxtb	r3, r3
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d103      	bne.n	80048e0 <xQueueGenericSend+0x16c>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x182>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f6:	f001 fe49 	bl	800658c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fa:	1d3a      	adds	r2, r7, #4
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ffe8 	bl	80058d8 <xTaskCheckForTimeOut>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d124      	bne.n	8004958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800490e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004910:	f000 fa9e 	bl	8004e50 <prvIsQueueFull>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	3310      	adds	r3, #16
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 ff0e 	bl	8005744 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800492a:	f000 fa29 	bl	8004d80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800492e:	f000 fd43 	bl	80053b8 <xTaskResumeAll>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	f47f af7c 	bne.w	8004832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <xQueueGenericSend+0x1f8>)
 800493c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	e772      	b.n	8004832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800494c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800494e:	f000 fa17 	bl	8004d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004952:	f000 fd31 	bl	80053b8 <xTaskResumeAll>
 8004956:	e76c      	b.n	8004832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495a:	f000 fa11 	bl	8004d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800495e:	f000 fd2b 	bl	80053b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004962:	2300      	movs	r3, #0
		}
	}
}
 8004964:	4618      	mov	r0, r3
 8004966:	3738      	adds	r7, #56	; 0x38
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <xQueueGenericSendFromISR+0x3c>
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <xQueueGenericSendFromISR+0x40>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <xQueueGenericSendFromISR+0x42>
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	623b      	str	r3, [r7, #32]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d103      	bne.n	80049da <xQueueGenericSendFromISR+0x6a>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <xQueueGenericSendFromISR+0x6e>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericSendFromISR+0x70>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61fb      	str	r3, [r7, #28]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049fa:	f001 fe59 	bl	80066b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	61ba      	str	r2, [r7, #24]
 8004a14:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <xQueueGenericSendFromISR+0xbc>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d12c      	bne.n	8004a86 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3c:	f000 f910 	bl	8004c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d112      	bne.n	8004a70 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	3324      	adds	r3, #36	; 0x24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fec4 	bl	80057e4 <xTaskRemoveFromEventList>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e007      	b.n	8004a80 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a74:	3301      	adds	r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	b25a      	sxtb	r2, r3
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a80:	2301      	movs	r3, #1
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a84:	e001      	b.n	8004a8a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3738      	adds	r7, #56	; 0x38
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	; 0x30
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <xQueueReceive+0x30>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	623b      	str	r3, [r7, #32]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <xQueueReceive+0x3e>
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <xQueueReceive+0x42>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <xQueueReceive+0x44>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueReceive+0x5e>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	61fb      	str	r3, [r7, #28]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004afe:	f001 f833 	bl	8005b68 <xTaskGetSchedulerState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <xQueueReceive+0x6e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <xQueueReceive+0x72>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <xQueueReceive+0x74>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xQueueReceive+0x8e>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	61bb      	str	r3, [r7, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b2e:	f001 fcfd 	bl	800652c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b42:	f000 f8f7 	bl	8004d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00f      	beq.n	8004b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	3310      	adds	r3, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fe42 	bl	80057e4 <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b66:	4b3d      	ldr	r3, [pc, #244]	; (8004c5c <xQueueReceive+0x1bc>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b76:	f001 fd09 	bl	800658c <vPortExitCritical>
				return pdPASS;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e069      	b.n	8004c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b84:	f001 fd02 	bl	800658c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e062      	b.n	8004c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fe88 	bl	80058ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba0:	f001 fcf4 	bl	800658c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ba4:	f000 fbfa 	bl	800539c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ba8:	f001 fcc0 	bl	800652c <vPortEnterCritical>
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d103      	bne.n	8004bc2 <xQueueReceive+0x122>
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d103      	bne.n	8004bd8 <xQueueReceive+0x138>
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd8:	f001 fcd8 	bl	800658c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bdc:	1d3a      	adds	r2, r7, #4
 8004bde:	f107 0310 	add.w	r3, r7, #16
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fe77 	bl	80058d8 <xTaskCheckForTimeOut>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d123      	bne.n	8004c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf2:	f000 f917 	bl	8004e24 <prvIsQueueEmpty>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fd9d 	bl	8005744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0c:	f000 f8b8 	bl	8004d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c10:	f000 fbd2 	bl	80053b8 <xTaskResumeAll>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d189      	bne.n	8004b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <xQueueReceive+0x1bc>)
 8004c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	e780      	b.n	8004b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2e:	f000 f8a7 	bl	8004d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c32:	f000 fbc1 	bl	80053b8 <xTaskResumeAll>
 8004c36:	e77a      	b.n	8004b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3a:	f000 f8a1 	bl	8004d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c3e:	f000 fbbb 	bl	80053b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c44:	f000 f8ee 	bl	8004e24 <prvIsQueueEmpty>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f43f af6f 	beq.w	8004b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	; 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d14d      	bne.n	8004d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 ff8a 	bl	8005ba4 <xTaskPriorityDisinherit>
 8004c90:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	e043      	b.n	8004d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d119      	bne.n	8004cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6898      	ldr	r0, [r3, #8]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	f001 ff3a 	bl	8006b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d32b      	bcc.n	8004d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	e026      	b.n	8004d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68d8      	ldr	r0, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f001 ff20 	bl	8006b24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	425b      	negs	r3, r3
 8004cee:	441a      	add	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d207      	bcs.n	8004d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	425b      	negs	r3, r3
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d105      	bne.n	8004d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	441a      	add	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d303      	bcc.n	8004d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	461a      	mov	r2, r3
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f001 fed6 	bl	8006b24 <memcpy>
	}
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d88:	f001 fbd0 	bl	800652c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d94:	e011      	b.n	8004dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d012      	beq.n	8004dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fd1e 	bl	80057e4 <xTaskRemoveFromEventList>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dae:	f000 fdf5 	bl	800599c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dce9      	bgt.n	8004d96 <prvUnlockQueue+0x16>
 8004dc2:	e000      	b.n	8004dc6 <prvUnlockQueue+0x46>
					break;
 8004dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dce:	f001 fbdd 	bl	800658c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dd2:	f001 fbab 	bl	800652c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dde:	e011      	b.n	8004e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3310      	adds	r3, #16
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fcf9 	bl	80057e4 <xTaskRemoveFromEventList>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004df8:	f000 fdd0 	bl	800599c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dce9      	bgt.n	8004de0 <prvUnlockQueue+0x60>
 8004e0c:	e000      	b.n	8004e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	22ff      	movs	r2, #255	; 0xff
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e18:	f001 fbb8 	bl	800658c <vPortExitCritical>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e2c:	f001 fb7e 	bl	800652c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e001      	b.n	8004e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e42:	f001 fba3 	bl	800658c <vPortExitCritical>

	return xReturn;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e58:	f001 fb68 	bl	800652c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d102      	bne.n	8004e6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e001      	b.n	8004e72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e72:	f001 fb8b 	bl	800658c <vPortExitCritical>

	return xReturn;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e014      	b.n	8004eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <vQueueAddToRegistry+0x4c>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <vQueueAddToRegistry+0x4c>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <vQueueAddToRegistry+0x4c>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004eb2:	e006      	b.n	8004ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d9e7      	bls.n	8004e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	20000894 	.word	0x20000894

08004ed0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ee0:	f001 fb24 	bl	800652c <vPortEnterCritical>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d103      	bne.n	8004efa <vQueueWaitForMessageRestricted+0x2a>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <vQueueWaitForMessageRestricted+0x40>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f10:	f001 fb3c 	bl	800658c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3324      	adds	r3, #36	; 0x24
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fc31 	bl	800578c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f7ff ff28 	bl	8004d80 <prvUnlockQueue>
	}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08e      	sub	sp, #56	; 0x38
 8004f3c:	af04      	add	r7, sp, #16
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	61fb      	str	r3, [r7, #28]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f7e:	235c      	movs	r3, #92	; 0x5c
 8004f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b5c      	cmp	r3, #92	; 0x5c
 8004f86:	d00a      	beq.n	8004f9e <xTaskCreateStatic+0x66>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61bb      	str	r3, [r7, #24]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01e      	beq.n	8004fe2 <xTaskCreateStatic+0xaa>
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01b      	beq.n	8004fe2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	9302      	str	r3, [sp, #8]
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f850 	bl	800507a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fdc:	f000 f8d4 	bl	8005188 <prvAddNewTaskToReadyList>
 8004fe0:	e001      	b.n	8004fe6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fe6:	697b      	ldr	r3, [r7, #20]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af04      	add	r7, sp, #16
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fb91 	bl	800672c <pvPortMalloc>
 800500a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005012:	205c      	movs	r0, #92	; 0x5c
 8005014:	f001 fb8a 	bl	800672c <pvPortMalloc>
 8005018:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
 8005026:	e005      	b.n	8005034 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005028:	6978      	ldr	r0, [r7, #20]
 800502a:	f001 fc43 	bl	80068b4 <vPortFree>
 800502e:	e001      	b.n	8005034 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d017      	beq.n	800506a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	2300      	movs	r3, #0
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	9302      	str	r3, [sp, #8]
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f80e 	bl	800507a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800505e:	69f8      	ldr	r0, [r7, #28]
 8005060:	f000 f892 	bl	8005188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e002      	b.n	8005070 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005070:	69bb      	ldr	r3, [r7, #24]
	}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b088      	sub	sp, #32
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	461a      	mov	r2, r3
 8005092:	21a5      	movs	r1, #165	; 0xa5
 8005094:	f001 fd54 	bl	8006b40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050a2:	3b01      	subs	r3, #1
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	617b      	str	r3, [r7, #20]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e012      	b.n	80050fe <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	7819      	ldrb	r1, [r3, #0]
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	3334      	adds	r3, #52	; 0x34
 80050e8:	460a      	mov	r2, r1
 80050ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d006      	beq.n	8005106 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b0f      	cmp	r3, #15
 8005102:	d9e9      	bls.n	80050d8 <prvInitialiseNewTask+0x5e>
 8005104:	e000      	b.n	8005108 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005106:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	2b37      	cmp	r3, #55	; 0x37
 8005114:	d901      	bls.n	800511a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005116:	2337      	movs	r3, #55	; 0x37
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005124:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2200      	movs	r2, #0
 800512a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	3304      	adds	r3, #4
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff f98c 	bl	800444e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	3318      	adds	r3, #24
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff f987 	bl	800444e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005144:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005154:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f001 f8ef 	bl	800634c <pxPortInitialiseStack>
 800516e:	4602      	mov	r2, r0
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005180:	bf00      	nop
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005190:	f001 f9cc 	bl	800652c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005194:	4b2d      	ldr	r3, [pc, #180]	; (800524c <prvAddNewTaskToReadyList+0xc4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	4a2c      	ldr	r2, [pc, #176]	; (800524c <prvAddNewTaskToReadyList+0xc4>)
 800519c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <prvAddNewTaskToReadyList+0xc8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051a6:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <prvAddNewTaskToReadyList+0xc8>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <prvAddNewTaskToReadyList+0xc4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d110      	bne.n	80051d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051b4:	f000 fc16 	bl	80059e4 <prvInitialiseTaskLists>
 80051b8:	e00d      	b.n	80051d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <prvAddNewTaskToReadyList+0xcc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <prvAddNewTaskToReadyList+0xc8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d802      	bhi.n	80051d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d0:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <prvAddNewTaskToReadyList+0xc8>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <prvAddNewTaskToReadyList+0xd0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <prvAddNewTaskToReadyList+0xd0>)
 80051de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <prvAddNewTaskToReadyList+0xd0>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <prvAddNewTaskToReadyList+0xd4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d903      	bls.n	80051fc <prvAddNewTaskToReadyList+0x74>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4a18      	ldr	r2, [pc, #96]	; (800525c <prvAddNewTaskToReadyList+0xd4>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4a15      	ldr	r2, [pc, #84]	; (8005260 <prvAddNewTaskToReadyList+0xd8>)
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f7ff f927 	bl	8004466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005218:	f001 f9b8 	bl	800658c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800521c:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <prvAddNewTaskToReadyList+0xcc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00e      	beq.n	8005242 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvAddNewTaskToReadyList+0xc8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	429a      	cmp	r2, r3
 8005230:	d207      	bcs.n	8005242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <prvAddNewTaskToReadyList+0xdc>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000da8 	.word	0x20000da8
 8005250:	200008d4 	.word	0x200008d4
 8005254:	20000db4 	.word	0x20000db4
 8005258:	20000dc4 	.word	0x20000dc4
 800525c:	20000db0 	.word	0x20000db0
 8005260:	200008d8 	.word	0x200008d8
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <vTaskDelay+0x60>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <vTaskDelay+0x30>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60bb      	str	r3, [r7, #8]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005298:	f000 f880 	bl	800539c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fcee 	bl	8005c80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052a4:	f000 f888 	bl	80053b8 <xTaskResumeAll>
 80052a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <vTaskDelay+0x64>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000dd0 	.word	0x20000dd0
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052de:	463a      	mov	r2, r7
 80052e0:	1d39      	adds	r1, r7, #4
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f860 	bl	80043ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	9202      	str	r2, [sp, #8]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	460a      	mov	r2, r1
 80052fe:	4921      	ldr	r1, [pc, #132]	; (8005384 <vTaskStartScheduler+0xb4>)
 8005300:	4821      	ldr	r0, [pc, #132]	; (8005388 <vTaskStartScheduler+0xb8>)
 8005302:	f7ff fe19 	bl	8004f38 <xTaskCreateStatic>
 8005306:	4603      	mov	r3, r0
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <vTaskStartScheduler+0xbc>)
 800530a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <vTaskStartScheduler+0xbc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e001      	b.n	800531e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d102      	bne.n	800532a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005324:	f000 fd00 	bl	8005d28 <xTimerCreateTimerTask>
 8005328:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d116      	bne.n	800535e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
}
 8005342:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <vTaskStartScheduler+0xc0>)
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <vTaskStartScheduler+0xc4>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <vTaskStartScheduler+0xc8>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005358:	f001 f876 	bl	8006448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800535c:	e00e      	b.n	800537c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d10a      	bne.n	800537c <vTaskStartScheduler+0xac>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60fb      	str	r3, [r7, #12]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <vTaskStartScheduler+0xaa>
}
 800537c:	bf00      	nop
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08006b90 	.word	0x08006b90
 8005388:	080059b5 	.word	0x080059b5
 800538c:	20000dcc 	.word	0x20000dcc
 8005390:	20000dc8 	.word	0x20000dc8
 8005394:	20000db4 	.word	0x20000db4
 8005398:	20000dac 	.word	0x20000dac

0800539c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <vTaskSuspendAll+0x18>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a03      	ldr	r2, [pc, #12]	; (80053b4 <vTaskSuspendAll+0x18>)
 80053a8:	6013      	str	r3, [r2, #0]
}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000dd0 	.word	0x20000dd0

080053b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053c6:	4b42      	ldr	r3, [pc, #264]	; (80054d0 <xTaskResumeAll+0x118>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	603b      	str	r3, [r7, #0]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053e4:	f001 f8a2 	bl	800652c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053e8:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <xTaskResumeAll+0x118>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4a38      	ldr	r2, [pc, #224]	; (80054d0 <xTaskResumeAll+0x118>)
 80053f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <xTaskResumeAll+0x118>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d162      	bne.n	80054c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <xTaskResumeAll+0x11c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d05e      	beq.n	80054c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005402:	e02f      	b.n	8005464 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005404:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <xTaskResumeAll+0x120>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3318      	adds	r3, #24
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff f883 	bl	800451c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f87e 	bl	800451c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <xTaskResumeAll+0x124>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d903      	bls.n	8005434 <xTaskResumeAll+0x7c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <xTaskResumeAll+0x124>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <xTaskResumeAll+0x128>)
 8005442:	441a      	add	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7ff f80b 	bl	8004466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005454:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <xTaskResumeAll+0x12c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <xTaskResumeAll+0x130>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <xTaskResumeAll+0x120>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1cb      	bne.n	8005404 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005472:	f000 fb55 	bl	8005b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005476:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <xTaskResumeAll+0x134>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d010      	beq.n	80054a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005482:	f000 f845 	bl	8005510 <xTaskIncrementTick>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800548c:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <xTaskResumeAll+0x130>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f1      	bne.n	8005482 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <xTaskResumeAll+0x134>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <xTaskResumeAll+0x130>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <xTaskResumeAll+0x138>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054c0:	f001 f864 	bl	800658c <vPortExitCritical>

	return xAlreadyYielded;
 80054c4:	68bb      	ldr	r3, [r7, #8]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000dd0 	.word	0x20000dd0
 80054d4:	20000da8 	.word	0x20000da8
 80054d8:	20000d68 	.word	0x20000d68
 80054dc:	20000db0 	.word	0x20000db0
 80054e0:	200008d8 	.word	0x200008d8
 80054e4:	200008d4 	.word	0x200008d4
 80054e8:	20000dbc 	.word	0x20000dbc
 80054ec:	20000db8 	.word	0x20000db8
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <xTaskGetTickCount+0x18>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005500:	687b      	ldr	r3, [r7, #4]
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	20000dac 	.word	0x20000dac

08005510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551a:	4b51      	ldr	r3, [pc, #324]	; (8005660 <xTaskIncrementTick+0x150>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 808e 	bne.w	8005640 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005524:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <xTaskIncrementTick+0x154>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800552c:	4a4d      	ldr	r2, [pc, #308]	; (8005664 <xTaskIncrementTick+0x154>)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d120      	bne.n	800557a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005538:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <xTaskIncrementTick+0x158>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <xTaskIncrementTick+0x48>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	603b      	str	r3, [r7, #0]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <xTaskIncrementTick+0x46>
 8005558:	4b43      	ldr	r3, [pc, #268]	; (8005668 <xTaskIncrementTick+0x158>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	4b43      	ldr	r3, [pc, #268]	; (800566c <xTaskIncrementTick+0x15c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a41      	ldr	r2, [pc, #260]	; (8005668 <xTaskIncrementTick+0x158>)
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4a41      	ldr	r2, [pc, #260]	; (800566c <xTaskIncrementTick+0x15c>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b40      	ldr	r3, [pc, #256]	; (8005670 <xTaskIncrementTick+0x160>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	4a3f      	ldr	r2, [pc, #252]	; (8005670 <xTaskIncrementTick+0x160>)
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	f000 fad3 	bl	8005b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <xTaskIncrementTick+0x164>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	429a      	cmp	r2, r3
 8005582:	d34e      	bcc.n	8005622 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005584:	4b38      	ldr	r3, [pc, #224]	; (8005668 <xTaskIncrementTick+0x158>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <xTaskIncrementTick+0x82>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xTaskIncrementTick+0x84>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <xTaskIncrementTick+0x164>)
 800559a:	f04f 32ff 	mov.w	r2, #4294967295
 800559e:	601a      	str	r2, [r3, #0]
					break;
 80055a0:	e03f      	b.n	8005622 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055a2:	4b31      	ldr	r3, [pc, #196]	; (8005668 <xTaskIncrementTick+0x158>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d203      	bcs.n	80055c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ba:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <xTaskIncrementTick+0x164>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6013      	str	r3, [r2, #0]
						break;
 80055c0:	e02f      	b.n	8005622 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe ffa8 	bl	800451c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3318      	adds	r3, #24
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe ff9f 	bl	800451c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <xTaskIncrementTick+0x168>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d903      	bls.n	80055f2 <xTaskIncrementTick+0xe2>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <xTaskIncrementTick+0x168>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a1f      	ldr	r2, [pc, #124]	; (800567c <xTaskIncrementTick+0x16c>)
 8005600:	441a      	add	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7fe ff2c 	bl	8004466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <xTaskIncrementTick+0x170>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d3b3      	bcc.n	8005584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005620:	e7b0      	b.n	8005584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <xTaskIncrementTick+0x170>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	4914      	ldr	r1, [pc, #80]	; (800567c <xTaskIncrementTick+0x16c>)
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d907      	bls.n	800564a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800563a:	2301      	movs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e004      	b.n	800564a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005640:	4b10      	ldr	r3, [pc, #64]	; (8005684 <xTaskIncrementTick+0x174>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a0f      	ldr	r2, [pc, #60]	; (8005684 <xTaskIncrementTick+0x174>)
 8005648:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <xTaskIncrementTick+0x178>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005656:	697b      	ldr	r3, [r7, #20]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000dd0 	.word	0x20000dd0
 8005664:	20000dac 	.word	0x20000dac
 8005668:	20000d60 	.word	0x20000d60
 800566c:	20000d64 	.word	0x20000d64
 8005670:	20000dc0 	.word	0x20000dc0
 8005674:	20000dc8 	.word	0x20000dc8
 8005678:	20000db0 	.word	0x20000db0
 800567c:	200008d8 	.word	0x200008d8
 8005680:	200008d4 	.word	0x200008d4
 8005684:	20000db8 	.word	0x20000db8
 8005688:	20000dbc 	.word	0x20000dbc

0800568c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005692:	4b27      	ldr	r3, [pc, #156]	; (8005730 <vTaskSwitchContext+0xa4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800569a:	4b26      	ldr	r3, [pc, #152]	; (8005734 <vTaskSwitchContext+0xa8>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056a0:	e041      	b.n	8005726 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <vTaskSwitchContext+0xa8>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056a8:	4b23      	ldr	r3, [pc, #140]	; (8005738 <vTaskSwitchContext+0xac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e010      	b.n	80056d2 <vTaskSwitchContext+0x46>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <vTaskSwitchContext+0x40>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	607b      	str	r3, [r7, #4]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <vTaskSwitchContext+0x3e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	491a      	ldr	r1, [pc, #104]	; (800573c <vTaskSwitchContext+0xb0>)
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0e4      	beq.n	80056b0 <vTaskSwitchContext+0x24>
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4a12      	ldr	r2, [pc, #72]	; (800573c <vTaskSwitchContext+0xb0>)
 80056f2:	4413      	add	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3308      	adds	r3, #8
 8005708:	429a      	cmp	r2, r3
 800570a:	d104      	bne.n	8005716 <vTaskSwitchContext+0x8a>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a08      	ldr	r2, [pc, #32]	; (8005740 <vTaskSwitchContext+0xb4>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <vTaskSwitchContext+0xac>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	20000dd0 	.word	0x20000dd0
 8005734:	20000dbc 	.word	0x20000dbc
 8005738:	20000db0 	.word	0x20000db0
 800573c:	200008d8 	.word	0x200008d8
 8005740:	200008d4 	.word	0x200008d4

08005744 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60fb      	str	r3, [r7, #12]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <vTaskPlaceOnEventList+0x44>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3318      	adds	r3, #24
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fe fe9a 	bl	80044ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005778:	2101      	movs	r1, #1
 800577a:	6838      	ldr	r0, [r7, #0]
 800577c:	f000 fa80 	bl	8005c80 <prvAddCurrentTaskToDelayedList>
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200008d4 	.word	0x200008d4

0800578c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3318      	adds	r3, #24
 80057ba:	4619      	mov	r1, r3
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7fe fe52 	bl	8004466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
 80057cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f000 fa55 	bl	8005c80 <prvAddCurrentTaskToDelayedList>
	}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200008d4 	.word	0x200008d4

080057e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60fb      	str	r3, [r7, #12]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3318      	adds	r3, #24
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe fe81 	bl	800451c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <xTaskRemoveFromEventList+0xb0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11d      	bne.n	800585e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fe78 	bl	800451c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <xTaskRemoveFromEventList+0xb4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <xTaskRemoveFromEventList+0x5c>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <xTaskRemoveFromEventList+0xb4>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a13      	ldr	r2, [pc, #76]	; (800589c <xTaskRemoveFromEventList+0xb8>)
 800584e:	441a      	add	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7fe fe05 	bl	8004466 <vListInsertEnd>
 800585c:	e005      	b.n	800586a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	480e      	ldr	r0, [pc, #56]	; (80058a0 <xTaskRemoveFromEventList+0xbc>)
 8005866:	f7fe fdfe 	bl	8004466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <xTaskRemoveFromEventList+0xc0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d905      	bls.n	8005884 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <xTaskRemoveFromEventList+0xc4>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e001      	b.n	8005888 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000dd0 	.word	0x20000dd0
 8005898:	20000db0 	.word	0x20000db0
 800589c:	200008d8 	.word	0x200008d8
 80058a0:	20000d68 	.word	0x20000d68
 80058a4:	200008d4 	.word	0x200008d4
 80058a8:	20000dbc 	.word	0x20000dbc

080058ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <vTaskInternalSetTimeOutState+0x24>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <vTaskInternalSetTimeOutState+0x28>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000dc0 	.word	0x20000dc0
 80058d4:	20000dac 	.word	0x20000dac

080058d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800591a:	f000 fe07 	bl	800652c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <xTaskCheckForTimeOut+0xbc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d102      	bne.n	800593e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e023      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <xTaskCheckForTimeOut+0xc0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d007      	beq.n	800595a <xTaskCheckForTimeOut+0x82>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	429a      	cmp	r2, r3
 8005952:	d302      	bcc.n	800595a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e015      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	429a      	cmp	r2, r3
 8005962:	d20b      	bcs.n	800597c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ff9b 	bl	80058ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e004      	b.n	8005986 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005982:	2301      	movs	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005986:	f000 fe01 	bl	800658c <vPortExitCritical>

	return xReturn;
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000dac 	.word	0x20000dac
 8005998:	20000dc0 	.word	0x20000dc0

0800599c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <vTaskMissedYield+0x14>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000dbc 	.word	0x20000dbc

080059b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059bc:	f000 f852 	bl	8005a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <prvIdleTask+0x28>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d9f9      	bls.n	80059bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <prvIdleTask+0x2c>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059d8:	e7f0      	b.n	80059bc <prvIdleTask+0x8>
 80059da:	bf00      	nop
 80059dc:	200008d8 	.word	0x200008d8
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e00c      	b.n	8005a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <prvInitialiseTaskLists+0x60>)
 80059fc:	4413      	add	r3, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fd06 	bl	8004410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b37      	cmp	r3, #55	; 0x37
 8005a0e:	d9ef      	bls.n	80059f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a10:	480d      	ldr	r0, [pc, #52]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a12:	f7fe fcfd 	bl	8004410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a16:	480d      	ldr	r0, [pc, #52]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a18:	f7fe fcfa 	bl	8004410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a1c:	480c      	ldr	r0, [pc, #48]	; (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a1e:	f7fe fcf7 	bl	8004410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a22:	480c      	ldr	r0, [pc, #48]	; (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a24:	f7fe fcf4 	bl	8004410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a28:	480b      	ldr	r0, [pc, #44]	; (8005a58 <prvInitialiseTaskLists+0x74>)
 8005a2a:	f7fe fcf1 	bl	8004410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <prvInitialiseTaskLists+0x78>)
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvInitialiseTaskLists+0x7c>)
 8005a36:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200008d8 	.word	0x200008d8
 8005a48:	20000d38 	.word	0x20000d38
 8005a4c:	20000d4c 	.word	0x20000d4c
 8005a50:	20000d68 	.word	0x20000d68
 8005a54:	20000d7c 	.word	0x20000d7c
 8005a58:	20000d94 	.word	0x20000d94
 8005a5c:	20000d60 	.word	0x20000d60
 8005a60:	20000d64 	.word	0x20000d64

08005a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6a:	e019      	b.n	8005aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a6c:	f000 fd5e 	bl	800652c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <prvCheckTasksWaitingTermination+0x50>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fd4d 	bl	800451c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a0b      	ldr	r2, [pc, #44]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a96:	f000 fd79 	bl	800658c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f810 	bl	8005ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e1      	bne.n	8005a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000d7c 	.word	0x20000d7c
 8005ab8:	20000da8 	.word	0x20000da8
 8005abc:	20000d90 	.word	0x20000d90

08005ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 feec 	bl	80068b4 <vPortFree>
				vPortFree( pxTCB );
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fee9 	bl	80068b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae2:	e018      	b.n	8005b16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d103      	bne.n	8005af6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fee0 	bl	80068b4 <vPortFree>
	}
 8005af4:	e00f      	b.n	8005b16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d00a      	beq.n	8005b16 <prvDeleteTCB+0x56>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <prvDeleteTCB+0x54>
	}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <prvResetNextTaskUnblockTime+0x40>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <prvResetNextTaskUnblockTime+0x14>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <prvResetNextTaskUnblockTime+0x16>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvResetNextTaskUnblockTime+0x44>)
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b42:	e008      	b.n	8005b56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <prvResetNextTaskUnblockTime+0x40>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <prvResetNextTaskUnblockTime+0x44>)
 8005b54:	6013      	str	r3, [r2, #0]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	20000d60 	.word	0x20000d60
 8005b64:	20000dc8 	.word	0x20000dc8

08005b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <xTaskGetSchedulerState+0x34>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b76:	2301      	movs	r3, #1
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	e008      	b.n	8005b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <xTaskGetSchedulerState+0x38>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b84:	2302      	movs	r3, #2
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e001      	b.n	8005b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b8e:	687b      	ldr	r3, [r7, #4]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000db4 	.word	0x20000db4
 8005ba0:	20000dd0 	.word	0x20000dd0

08005ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d056      	beq.n	8005c68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bba:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <xTaskPriorityDisinherit+0xd0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d00a      	beq.n	8005bda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	1e5a      	subs	r2, r3, #1
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d02c      	beq.n	8005c68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d128      	bne.n	8005c68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fc7e 	bl	800451c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <xTaskPriorityDisinherit+0xd4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskPriorityDisinherit+0xa4>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <xTaskPriorityDisinherit+0xd4>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <xTaskPriorityDisinherit+0xd8>)
 8005c56:	441a      	add	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe fc01 	bl	8004466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c68:	697b      	ldr	r3, [r7, #20]
	}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200008d4 	.word	0x200008d4
 8005c78:	20000db0 	.word	0x20000db0
 8005c7c:	200008d8 	.word	0x200008d8

08005c80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c90:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fc40 	bl	800451c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d10a      	bne.n	8005cba <prvAddCurrentTaskToDelayedList+0x3a>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4819      	ldr	r0, [pc, #100]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cb4:	f7fe fbd7 	bl	8004466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb8:	e026      	b.n	8005d08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d209      	bcs.n	8005ce6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7fe fbe4 	bl	80044ac <vListInsert>
}
 8005ce4:	e010      	b.n	8005d08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7fe fbda 	bl	80044ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d202      	bcs.n	8005d08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d02:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6013      	str	r3, [r2, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000dac 	.word	0x20000dac
 8005d14:	200008d4 	.word	0x200008d4
 8005d18:	20000d94 	.word	0x20000d94
 8005d1c:	20000d64 	.word	0x20000d64
 8005d20:	20000d60 	.word	0x20000d60
 8005d24:	20000dc8 	.word	0x20000dc8

08005d28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d32:	f000 facb 	bl	80062cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d36:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <xTimerCreateTimerTask+0x80>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d021      	beq.n	8005d82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d46:	1d3a      	adds	r2, r7, #4
 8005d48:	f107 0108 	add.w	r1, r7, #8
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fb43 	bl	80043dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	9202      	str	r2, [sp, #8]
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	2302      	movs	r3, #2
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	460a      	mov	r2, r1
 8005d68:	4910      	ldr	r1, [pc, #64]	; (8005dac <xTimerCreateTimerTask+0x84>)
 8005d6a:	4811      	ldr	r0, [pc, #68]	; (8005db0 <xTimerCreateTimerTask+0x88>)
 8005d6c:	f7ff f8e4 	bl	8004f38 <xTaskCreateStatic>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <xTimerCreateTimerTask+0x8c>)
 8005d74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <xTimerCreateTimerTask+0x8c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	613b      	str	r3, [r7, #16]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d9e:	697b      	ldr	r3, [r7, #20]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000e04 	.word	0x20000e04
 8005dac:	08006b98 	.word	0x08006b98
 8005db0:	08005ed5 	.word	0x08005ed5
 8005db4:	20000e08 	.word	0x20000e08

08005db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	623b      	str	r3, [r7, #32]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d02a      	beq.n	8005e44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b05      	cmp	r3, #5
 8005dfe:	dc18      	bgt.n	8005e32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e00:	f7ff feb2 	bl	8005b68 <xTaskGetSchedulerState>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d109      	bne.n	8005e1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f107 0110 	add.w	r1, r7, #16
 8005e12:	2300      	movs	r3, #0
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	f7fe fcad 	bl	8004774 <xQueueGenericSend>
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e1c:	e012      	b.n	8005e44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f107 0110 	add.w	r1, r7, #16
 8005e26:	2300      	movs	r3, #0
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f7fe fca3 	bl	8004774 <xQueueGenericSend>
 8005e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e30:	e008      	b.n	8005e44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <xTimerGenericCommand+0x98>)
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f107 0110 	add.w	r1, r7, #16
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	f7fe fd97 	bl	8004970 <xQueueGenericSendFromISR>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3728      	adds	r7, #40	; 0x28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000e04 	.word	0x20000e04

08005e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ed0 <prvProcessExpiredTimer+0x7c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fb55 	bl	800451c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d122      	bne.n	8005ec0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	18d1      	adds	r1, r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	6978      	ldr	r0, [r7, #20]
 8005e88:	f000 f8c8 	bl	800601c <prvInsertTimerInActiveList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e92:	2300      	movs	r3, #0
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	2300      	movs	r3, #0
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6978      	ldr	r0, [r7, #20]
 8005e9e:	f7ff ff8b 	bl	8005db8 <xTimerGenericCommand>
 8005ea2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	60fb      	str	r3, [r7, #12]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	6978      	ldr	r0, [r7, #20]
 8005ec6:	4798      	blx	r3
}
 8005ec8:	bf00      	nop
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000dfc 	.word	0x20000dfc

08005ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f857 	bl	8005f94 <prvGetNextExpireTime>
 8005ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f803 	bl	8005ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ef2:	f000 f8d5 	bl	80060a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ef6:	e7f1      	b.n	8005edc <prvTimerTask+0x8>

08005ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f02:	f7ff fa4b 	bl	800539c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f06:	f107 0308 	add.w	r3, r7, #8
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f866 	bl	8005fdc <prvSampleTimeNow>
 8005f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d130      	bne.n	8005f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <prvProcessTimerOrBlockTask+0x3c>
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d806      	bhi.n	8005f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f26:	f7ff fa47 	bl	80053b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff91 	bl	8005e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f32:	e024      	b.n	8005f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f3a:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <prvProcessTimerOrBlockTask+0x90>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <prvProcessTimerOrBlockTask+0x94>)
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7fe ffb9 	bl	8004ed0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f5e:	f7ff fa2b 	bl	80053b8 <xTaskResumeAll>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <prvProcessTimerOrBlockTask+0x98>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
}
 8005f78:	e001      	b.n	8005f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f7a:	f7ff fa1d 	bl	80053b8 <xTaskResumeAll>
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000e00 	.word	0x20000e00
 8005f8c:	20000e04 	.word	0x20000e04
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f9c:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <prvGetNextExpireTime+0x44>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <prvGetNextExpireTime+0x44>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e001      	b.n	8005fca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	20000dfc 	.word	0x20000dfc

08005fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fe4:	f7ff fa86 	bl	80054f4 <xTaskGetTickCount>
 8005fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <prvSampleTimeNow+0x3c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d205      	bcs.n	8006000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ff4:	f000 f908 	bl	8006208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006006:	4a04      	ldr	r2, [pc, #16]	; (8006018 <prvSampleTimeNow+0x3c>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800600c:	68fb      	ldr	r3, [r7, #12]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000e0c 	.word	0x20000e0c

0800601c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d812      	bhi.n	8006068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e01b      	b.n	800608e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006056:	4b10      	ldr	r3, [pc, #64]	; (8006098 <prvInsertTimerInActiveList+0x7c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7fe fa23 	bl	80044ac <vListInsert>
 8006066:	e012      	b.n	800608e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d206      	bcs.n	800607e <prvInsertTimerInActiveList+0x62>
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d302      	bcc.n	800607e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e007      	b.n	800608e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <prvInsertTimerInActiveList+0x80>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fe fa0f 	bl	80044ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000e00 	.word	0x20000e00
 800609c:	20000dfc 	.word	0x20000dfc

080060a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	; 0x38
 80060a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a6:	e09d      	b.n	80061e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da18      	bge.n	80060e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	3304      	adds	r3, #4
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	61fb      	str	r3, [r7, #28]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d6:	6850      	ldr	r0, [r2, #4]
 80060d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060da:	6892      	ldr	r2, [r2, #8]
 80060dc:	4611      	mov	r1, r2
 80060de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db7d      	blt.n	80061e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	3304      	adds	r3, #4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fa10 	bl	800451c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060fc:	463b      	mov	r3, r7
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff ff6c 	bl	8005fdc <prvSampleTimeNow>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b09      	cmp	r3, #9
 800610a:	d86b      	bhi.n	80061e4 <prvProcessReceivedCommands+0x144>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <prvProcessReceivedCommands+0x74>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	0800613d 	.word	0x0800613d
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800613d 	.word	0x0800613d
 8006120:	080061e5 	.word	0x080061e5
 8006124:	08006199 	.word	0x08006199
 8006128:	080061d1 	.word	0x080061d1
 800612c:	0800613d 	.word	0x0800613d
 8006130:	0800613d 	.word	0x0800613d
 8006134:	080061e5 	.word	0x080061e5
 8006138:	08006199 	.word	0x08006199
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	18d1      	adds	r1, r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614a:	f7ff ff67 	bl	800601c <prvInsertTimerInActiveList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d047      	beq.n	80061e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d13f      	bne.n	80061e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	441a      	add	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	2100      	movs	r1, #0
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f7ff fe1f 	bl	8005db8 <xTimerGenericCommand>
 800617a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d130      	bne.n	80061e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61bb      	str	r3, [r7, #24]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	617b      	str	r3, [r7, #20]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	18d1      	adds	r1, r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ca:	f7ff ff27 	bl	800601c <prvInsertTimerInActiveList>
					break;
 80061ce:	e009      	b.n	80061e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80061da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061dc:	f000 fb6a 	bl	80068b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061e0:	e000      	b.n	80061e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <prvProcessReceivedCommands+0x164>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1d39      	adds	r1, r7, #4
 80061ea:	2200      	movs	r2, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fc57 	bl	8004aa0 <xQueueReceive>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f af57 	bne.w	80060a8 <prvProcessReceivedCommands+0x8>
	}
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	3730      	adds	r7, #48	; 0x30
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000e04 	.word	0x20000e04

08006208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800620e:	e045      	b.n	800629c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006210:	4b2c      	ldr	r3, [pc, #176]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800621a:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3304      	adds	r3, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe f977 	bl	800451c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d12e      	bne.n	800629c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	d90e      	bls.n	800626e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7fe f920 	bl	80044ac <vListInsert>
 800626c:	e016      	b.n	800629c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	2100      	movs	r1, #0
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fd9d 	bl	8005db8 <xTimerGenericCommand>
 800627e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	603b      	str	r3, [r7, #0]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800629c:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1b4      	bne.n	8006210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <prvSwitchTimerLists+0xc0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <prvSwitchTimerLists+0xbc>)
 80062b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062b4:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <prvSwitchTimerLists+0xc0>)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6013      	str	r3, [r2, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000dfc 	.word	0x20000dfc
 80062c8:	20000e00 	.word	0x20000e00

080062cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062d2:	f000 f92b 	bl	800652c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <prvCheckForValidListAndQueue+0x60>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d120      	bne.n	8006320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062de:	4814      	ldr	r0, [pc, #80]	; (8006330 <prvCheckForValidListAndQueue+0x64>)
 80062e0:	f7fe f896 	bl	8004410 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062e4:	4813      	ldr	r0, [pc, #76]	; (8006334 <prvCheckForValidListAndQueue+0x68>)
 80062e6:	f7fe f893 	bl	8004410 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ea:	4b13      	ldr	r3, [pc, #76]	; (8006338 <prvCheckForValidListAndQueue+0x6c>)
 80062ec:	4a10      	ldr	r2, [pc, #64]	; (8006330 <prvCheckForValidListAndQueue+0x64>)
 80062ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <prvCheckForValidListAndQueue+0x70>)
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <prvCheckForValidListAndQueue+0x68>)
 80062f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062f6:	2300      	movs	r3, #0
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <prvCheckForValidListAndQueue+0x74>)
 80062fc:	4a11      	ldr	r2, [pc, #68]	; (8006344 <prvCheckForValidListAndQueue+0x78>)
 80062fe:	2110      	movs	r1, #16
 8006300:	200a      	movs	r0, #10
 8006302:	f7fe f99d 	bl	8004640 <xQueueGenericCreateStatic>
 8006306:	4603      	mov	r3, r0
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <prvCheckForValidListAndQueue+0x60>)
 800630a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800630c:	4b07      	ldr	r3, [pc, #28]	; (800632c <prvCheckForValidListAndQueue+0x60>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <prvCheckForValidListAndQueue+0x60>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	490b      	ldr	r1, [pc, #44]	; (8006348 <prvCheckForValidListAndQueue+0x7c>)
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fdb0 	bl	8004e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006320:	f000 f934 	bl	800658c <vPortExitCritical>
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000e04 	.word	0x20000e04
 8006330:	20000dd4 	.word	0x20000dd4
 8006334:	20000de8 	.word	0x20000de8
 8006338:	20000dfc 	.word	0x20000dfc
 800633c:	20000e00 	.word	0x20000e00
 8006340:	20000eb0 	.word	0x20000eb0
 8006344:	20000e10 	.word	0x20000e10
 8006348:	08006ba0 	.word	0x08006ba0

0800634c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3b04      	subs	r3, #4
 800635c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3b04      	subs	r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b04      	subs	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800637c:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <pxPortInitialiseStack+0x54>)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b14      	subs	r3, #20
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b20      	subs	r3, #32
 8006392:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr
 80063a0:	080063a5 	.word	0x080063a5

080063a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <prvTaskExitError+0x54>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d00a      	beq.n	80063ce <prvTaskExitError+0x2a>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <prvTaskExitError+0x28>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60bb      	str	r3, [r7, #8]
}
 80063e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063e2:	bf00      	nop
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0fc      	beq.n	80063e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000018 	.word	0x20000018
 80063fc:	00000000 	.word	0x00000000

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	f04e 0e0d 	orr.w	lr, lr, #13
 800641e:	4770      	bx	lr

08006420 <pxCurrentTCBConst2>:
 8006420:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006428:	4806      	ldr	r0, [pc, #24]	; (8006444 <prvPortStartFirstTask+0x1c>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	b662      	cpsie	i
 8006434:	b661      	cpsie	f
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	df00      	svc	0
 8006440:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006442:	bf00      	nop
 8006444:	e000ed08 	.word	0xe000ed08

08006448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800644e:	4b32      	ldr	r3, [pc, #200]	; (8006518 <xPortStartScheduler+0xd0>)
 8006450:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006470:	b2da      	uxtb	r2, r3
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <xPortStartScheduler+0xd4>)
 8006474:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006476:	4b2a      	ldr	r3, [pc, #168]	; (8006520 <xPortStartScheduler+0xd8>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800647c:	e009      	b.n	8006492 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800647e:	4b28      	ldr	r3, [pc, #160]	; (8006520 <xPortStartScheduler+0xd8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3b01      	subs	r3, #1
 8006484:	4a26      	ldr	r2, [pc, #152]	; (8006520 <xPortStartScheduler+0xd8>)
 8006486:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d0ef      	beq.n	800647e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <xPortStartScheduler+0xd8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1c3 0307 	rsb	r3, r3, #7
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d00a      	beq.n	80064c0 <xPortStartScheduler+0x78>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064c0:	4b17      	ldr	r3, [pc, #92]	; (8006520 <xPortStartScheduler+0xd8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	4a16      	ldr	r2, [pc, #88]	; (8006520 <xPortStartScheduler+0xd8>)
 80064c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <xPortStartScheduler+0xd8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d2:	4a13      	ldr	r2, [pc, #76]	; (8006520 <xPortStartScheduler+0xd8>)
 80064d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064de:	4b11      	ldr	r3, [pc, #68]	; (8006524 <xPortStartScheduler+0xdc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <xPortStartScheduler+0xdc>)
 80064e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064ea:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <xPortStartScheduler+0xdc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <xPortStartScheduler+0xdc>)
 80064f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064f6:	f000 f8b9 	bl	800666c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <xPortStartScheduler+0xe0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006500:	f7ff ff92 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006504:	f7ff f8c2 	bl	800568c <vTaskSwitchContext>
	prvTaskExitError();
 8006508:	f7ff ff4c 	bl	80063a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	e000e400 	.word	0xe000e400
 800651c:	20000f00 	.word	0x20000f00
 8006520:	20000f04 	.word	0x20000f04
 8006524:	e000ed20 	.word	0xe000ed20
 8006528:	20000018 	.word	0x20000018

0800652c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <vPortEnterCritical+0x58>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	4a0d      	ldr	r2, [pc, #52]	; (8006584 <vPortEnterCritical+0x58>)
 800654e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <vPortEnterCritical+0x58>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10f      	bne.n	8006578 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <vPortEnterCritical+0x5c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <vPortEnterCritical+0x4c>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	603b      	str	r3, [r7, #0]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <vPortEnterCritical+0x4a>
	}
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000018 	.word	0x20000018
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006592:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <vPortExitCritical+0x4c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <vPortExitCritical+0x24>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	607b      	str	r3, [r7, #4]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <vPortExitCritical+0x4c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <vPortExitCritical+0x4c>)
 80065b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <vPortExitCritical+0x4c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <vPortExitCritical+0x42>
 80065c2:	2300      	movs	r3, #0
 80065c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f383 8811 	msr	BASEPRI, r3
}
 80065cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	20000018 	.word	0x20000018
 80065dc:	00000000 	.word	0x00000000

080065e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065e0:	f3ef 8009 	mrs	r0, PSP
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <pxCurrentTCBConst>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065f0:	6010      	str	r0, [r2, #0]
 80065f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065fa:	f380 8811 	msr	BASEPRI, r0
 80065fe:	f7ff f845 	bl	800568c <vTaskSwitchContext>
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	6808      	ldr	r0, [r1, #0]
 8006612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006616:	f380 8809 	msr	PSP, r0
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	4770      	bx	lr

08006620 <pxCurrentTCBConst>:
 8006620:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006642:	f7fe ff65 	bl	8005510 <xTaskIncrementTick>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <SysTick_Handler+0x40>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortSetupTimerInterrupt+0x30>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <vPortSetupTimerInterrupt+0x34>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <vPortSetupTimerInterrupt+0x38>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <vPortSetupTimerInterrupt+0x3c>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	4a08      	ldr	r2, [pc, #32]	; (80066ac <vPortSetupTimerInterrupt+0x40>)
 800668a:	3b01      	subs	r3, #1
 800668c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <vPortSetupTimerInterrupt+0x30>)
 8006690:	2207      	movs	r2, #7
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	e000e010 	.word	0xe000e010
 80066a0:	e000e018 	.word	0xe000e018
 80066a4:	2000000c 	.word	0x2000000c
 80066a8:	10624dd3 	.word	0x10624dd3
 80066ac:	e000e014 	.word	0xe000e014

080066b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066b6:	f3ef 8305 	mrs	r3, IPSR
 80066ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d914      	bls.n	80066ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066c2:	4a16      	ldr	r2, [pc, #88]	; (800671c <vPortValidateInterruptPriority+0x6c>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066cc:	4b14      	ldr	r3, [pc, #80]	; (8006720 <vPortValidateInterruptPriority+0x70>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	7afa      	ldrb	r2, [r7, #11]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d20a      	bcs.n	80066ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	607b      	str	r3, [r7, #4]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <vPortValidateInterruptPriority+0x74>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <vPortValidateInterruptPriority+0x78>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d90a      	bls.n	8006712 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	603b      	str	r3, [r7, #0]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <vPortValidateInterruptPriority+0x60>
	}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	e000e3f0 	.word	0xe000e3f0
 8006720:	20000f00 	.word	0x20000f00
 8006724:	e000ed0c 	.word	0xe000ed0c
 8006728:	20000f04 	.word	0x20000f04

0800672c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006738:	f7fe fe30 	bl	800539c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800673c:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <pvPortMalloc+0x174>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006744:	f000 f910 	bl	8006968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006748:	4b56      	ldr	r3, [pc, #344]	; (80068a4 <pvPortMalloc+0x178>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 808e 	bne.w	8006872 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01d      	beq.n	8006798 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800675c:	2208      	movs	r2, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f023 0307 	bic.w	r3, r3, #7
 8006774:	3308      	adds	r3, #8
 8006776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <pvPortMalloc+0x6c>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d069      	beq.n	8006872 <pvPortMalloc+0x146>
 800679e:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <pvPortMalloc+0x17c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d864      	bhi.n	8006872 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067a8:	4b40      	ldr	r3, [pc, #256]	; (80068ac <pvPortMalloc+0x180>)
 80067aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <pvPortMalloc+0x180>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067b2:	e004      	b.n	80067be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <pvPortMalloc+0xa4>
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f1      	bne.n	80067b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067d0:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <pvPortMalloc+0x174>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d04b      	beq.n	8006872 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2208      	movs	r2, #8
 80067e0:	4413      	add	r3, r2
 80067e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	2308      	movs	r3, #8
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d91f      	bls.n	800683c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0xf8>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	613b      	str	r3, [r7, #16]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006836:	69b8      	ldr	r0, [r7, #24]
 8006838:	f000 f8f8 	bl	8006a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <pvPortMalloc+0x17c>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <pvPortMalloc+0x17c>)
 8006848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <pvPortMalloc+0x17c>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <pvPortMalloc+0x184>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d203      	bcs.n	800685e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <pvPortMalloc+0x17c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <pvPortMalloc+0x184>)
 800685c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <pvPortMalloc+0x178>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	431a      	orrs	r2, r3
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006872:	f7fe fda1 	bl	80053b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <pvPortMalloc+0x16a>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <pvPortMalloc+0x168>
	return pvReturn;
 8006896:	69fb      	ldr	r3, [r7, #28]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20001b10 	.word	0x20001b10
 80068a4:	20001b1c 	.word	0x20001b1c
 80068a8:	20001b14 	.word	0x20001b14
 80068ac:	20001b08 	.word	0x20001b08
 80068b0:	20001b18 	.word	0x20001b18

080068b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d048      	beq.n	8006958 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c6:	2308      	movs	r3, #8
 80068c8:	425b      	negs	r3, r3
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b21      	ldr	r3, [pc, #132]	; (8006960 <vPortFree+0xac>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <vPortFree+0x44>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60fb      	str	r3, [r7, #12]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <vPortFree+0x62>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60bb      	str	r3, [r7, #8]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <vPortFree+0xac>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d019      	beq.n	8006958 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d115      	bne.n	8006958 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortFree+0xac>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	43db      	mvns	r3, r3
 8006936:	401a      	ands	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800693c:	f7fe fd2e 	bl	800539c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vPortFree+0xb0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4413      	add	r3, r2
 800694a:	4a06      	ldr	r2, [pc, #24]	; (8006964 <vPortFree+0xb0>)
 800694c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694e:	6938      	ldr	r0, [r7, #16]
 8006950:	f000 f86c 	bl	8006a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006954:	f7fe fd30 	bl	80053b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20001b1c 	.word	0x20001b1c
 8006964:	20001b14 	.word	0x20001b14

08006968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800696e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <prvHeapInit+0xac>)
 8006976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3307      	adds	r3, #7
 8006986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <prvHeapInit+0xac>)
 8006998:	4413      	add	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069a0:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <prvHeapInit+0xb0>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <prvHeapInit+0xb0>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069b4:	2208      	movs	r2, #8
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <prvHeapInit+0xb4>)
 80069c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <prvHeapInit+0xb4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <prvHeapInit+0xb4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <prvHeapInit+0xb4>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <prvHeapInit+0xb8>)
 80069f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <prvHeapInit+0xbc>)
 80069fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <prvHeapInit+0xc0>)
 8006a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000f08 	.word	0x20000f08
 8006a18:	20001b08 	.word	0x20001b08
 8006a1c:	20001b10 	.word	0x20001b10
 8006a20:	20001b18 	.word	0x20001b18
 8006a24:	20001b14 	.word	0x20001b14
 8006a28:	20001b1c 	.word	0x20001b1c

08006a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a34:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <prvInsertBlockIntoFreeList+0xa8>)
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e002      	b.n	8006a40 <prvInsertBlockIntoFreeList+0x14>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d8f7      	bhi.n	8006a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4413      	add	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d108      	bne.n	8006a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d118      	bne.n	8006ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <prvInsertBlockIntoFreeList+0xac>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d00d      	beq.n	8006aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	441a      	add	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e008      	b.n	8006abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvInsertBlockIntoFreeList+0xac>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e003      	b.n	8006abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d002      	beq.n	8006aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	20001b08 	.word	0x20001b08
 8006ad8:	20001b10 	.word	0x20001b10

08006adc <__libc_init_array>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	2600      	movs	r6, #0
 8006ae0:	4d0c      	ldr	r5, [pc, #48]	; (8006b14 <__libc_init_array+0x38>)
 8006ae2:	4c0d      	ldr	r4, [pc, #52]	; (8006b18 <__libc_init_array+0x3c>)
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	d109      	bne.n	8006b00 <__libc_init_array+0x24>
 8006aec:	f000 f830 	bl	8006b50 <_init>
 8006af0:	2600      	movs	r6, #0
 8006af2:	4d0a      	ldr	r5, [pc, #40]	; (8006b1c <__libc_init_array+0x40>)
 8006af4:	4c0a      	ldr	r4, [pc, #40]	; (8006b20 <__libc_init_array+0x44>)
 8006af6:	1b64      	subs	r4, r4, r5
 8006af8:	10a4      	asrs	r4, r4, #2
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	d105      	bne.n	8006b0a <__libc_init_array+0x2e>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b04:	4798      	blx	r3
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7ee      	b.n	8006ae8 <__libc_init_array+0xc>
 8006b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0e:	4798      	blx	r3
 8006b10:	3601      	adds	r6, #1
 8006b12:	e7f2      	b.n	8006afa <__libc_init_array+0x1e>
 8006b14:	08006c08 	.word	0x08006c08
 8006b18:	08006c08 	.word	0x08006c08
 8006b1c:	08006c08 	.word	0x08006c08
 8006b20:	08006c0c 	.word	0x08006c0c

08006b24 <memcpy>:
 8006b24:	440a      	add	r2, r1
 8006b26:	4291      	cmp	r1, r2
 8006b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b2c:	d100      	bne.n	8006b30 <memcpy+0xc>
 8006b2e:	4770      	bx	lr
 8006b30:	b510      	push	{r4, lr}
 8006b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b3c:	d1f9      	bne.n	8006b32 <memcpy+0xe>
 8006b3e:	bd10      	pop	{r4, pc}

08006b40 <memset>:
 8006b40:	4603      	mov	r3, r0
 8006b42:	4402      	add	r2, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d100      	bne.n	8006b4a <memset+0xa>
 8006b48:	4770      	bx	lr
 8006b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4e:	e7f9      	b.n	8006b44 <memset+0x4>

08006b50 <_init>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr

08006b5c <_fini>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr
