
SPEEDV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003758  08003758  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003758  08003758  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000001c  0800377c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800377c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a06d  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001840  00000000  00000000  0002a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017694  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b423  00000000  00000000  00044614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a05a  00000000  00000000  0004fa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9a91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  000d9ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003718 	.word	0x08003718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08003718 	.word	0x08003718

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */

	if (GPIO_Pin == GPIO_PIN_1){
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d112      	bne.n	8000de6 <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10) == 0) count++;
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dc6:	f000 ffdf 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0x2c>
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e004      	b.n	8000de6 <HAL_GPIO_EXTI_Callback+0x36>
		else count--;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000de4:	6013      	str	r3, [r2, #0]
	}

	if (count > 12 || count < -12) count = 0;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	dc04      	bgt.n	8000df8 <HAL_GPIO_EXTI_Callback+0x48>
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f113 0f0c 	cmn.w	r3, #12
 8000df6:	da02      	bge.n	8000dfe <HAL_GPIO_EXTI_Callback+0x4e>
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	20000038 	.word	0x20000038

08000e10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	 pos = count - countPrev;
 8000e18:	4b65      	ldr	r3, [pc, #404]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	4a65      	ldr	r2, [pc, #404]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e24:	6013      	str	r3, [r2, #0]
	if (dir == 1 && pos > N / 2) pos += N;
 8000e26:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d127      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000e2e:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd7c 	bl	8000930 <__aeabi_i2f>
 8000e38:	4604      	mov	r4, r0
 8000e3a:	4b61      	ldr	r3, [pc, #388]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fe7c 	bl	8000b40 <__aeabi_fdiv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff ff7f 	bl	8000d50 <__aeabi_fcmpgt>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d012      	beq.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000e58:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd67 	bl	8000930 <__aeabi_i2f>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	f7ff fcac 	bl	80007c8 <__addsf3>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff76 	bl	8000d64 <__aeabi_f2iz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e7c:	6013      	str	r3, [r2, #0]
	if (dir == -1)
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e86:	d12e      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		if (pos < -N / 2) pos -= N;
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd4f 	bl	8000930 <__aeabi_i2f>
 8000e92:	4604      	mov	r4, r0
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000e9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe4d 	bl	8000b40 <__aeabi_fdiv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff32 	bl	8000d14 <__aeabi_fcmplt>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d012      	beq.n	8000edc <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd38 	bl	8000930 <__aeabi_i2f>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff fc7b 	bl	80007c4 <__aeabi_fsub>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff47 	bl	8000d64 <__aeabi_f2iz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000eda:	6013      	str	r3, [r2, #0]
		pos = -pos;
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	4a35      	ldr	r2, [pc, #212]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ee4:	6013      	str	r3, [r2, #0]
	}
	v1 = (pos) / (13 * 60 * 1000);
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	441a      	add	r2, r3
 8000ef2:	14d2      	asrs	r2, r2, #19
 8000ef4:	17db      	asrs	r3, r3, #31
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fd19 	bl	8000930 <__aeabi_i2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f02:	6013      	str	r3, [r2, #0]
	v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fbaf 	bl	800066c <__aeabi_f2d>
 8000f0e:	a324      	add	r3, pc, #144	; (adr r3, 8000fa0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff f91c 	bl	8000150 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	461d      	mov	r5, r3
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fba1 	bl	800066c <__aeabi_f2d>
 8000f2a:	a31f      	add	r3, pc, #124	; (adr r3, 8000fa8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff f90e 	bl	8000150 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f7ff fa38 	bl	80003b0 <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb8d 	bl	800066c <__aeabi_f2d>
 8000f52:	a315      	add	r3, pc, #84	; (adr r3, 8000fa8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff f8fa 	bl	8000150 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fa24 	bl	80003b0 <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fbd4 	bl	800071c <__aeabi_d2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000f78:	6013      	str	r3, [r2, #0]
	countPrev = count;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f80:	6013      	str	r3, [r2, #0]
	v1Prev = v1;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f88:	6013      	str	r3, [r2, #0]
	counter ++;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	ced91687 	.word	0xced91687
 8000fa4:	3feb53f7 	.word	0x3feb53f7
 8000fa8:	532617c2 	.word	0x532617c2
 8000fac:	3fb2a305 	.word	0x3fb2a305
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	2000003c 	.word	0x2000003c
 8000fb8:	20000064 	.word	0x20000064
 8000fbc:	2000004c 	.word	0x2000004c
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	ac12f257 	.word	0xac12f257
 8000fc8:	20000044 	.word	0x20000044
 8000fcc:	20000050 	.word	0x20000050
 8000fd0:	20000054 	.word	0x20000054
 8000fd4:	20000040 	.word	0x20000040

08000fd8 <calculateSpeedPID>:

void calculateSpeedPID ()
{
 8000fd8:	b598      	push	{r3, r4, r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	e = vt - v1Filt;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <calculateSpeedPID+0xa8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <calculateSpeedPID+0xac>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fbec 	bl	80007c4 <__aeabi_fsub>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <calculateSpeedPID+0xb0>)
 8000ff2:	601a      	str	r2, [r3, #0]
	eIntergral += e;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <calculateSpeedPID+0xb4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <calculateSpeedPID+0xb0>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fbe2 	bl	80007c8 <__addsf3>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <calculateSpeedPID+0xb4>)
 800100a:	601a      	str	r2, [r3, #0]
	u = kp * e + ki * eIntergral;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <calculateSpeedPID+0xb8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <calculateSpeedPID+0xb0>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fcde 	bl	80009d8 <__aeabi_fmul>
 800101c:	4603      	mov	r3, r0
 800101e:	461c      	mov	r4, r3
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <calculateSpeedPID+0xbc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <calculateSpeedPID+0xb4>)
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fcd4 	bl	80009d8 <__aeabi_fmul>
 8001030:	4603      	mov	r3, r0
 8001032:	4619      	mov	r1, r3
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff fbc7 	bl	80007c8 <__addsf3>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe91 	bl	8000d64 <__aeabi_f2iz>
 8001042:	4603      	mov	r3, r0
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <calculateSpeedPID+0xc0>)
 8001046:	6013      	str	r3, [r2, #0]
	if(u < 0) dir = 1;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <calculateSpeedPID+0xc0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da03      	bge.n	8001058 <calculateSpeedPID+0x80>
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <calculateSpeedPID+0xc4>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e003      	b.n	8001060 <calculateSpeedPID+0x88>
	else dir = -1;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <calculateSpeedPID+0xc4>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295
 800105e:	601a      	str	r2, [r3, #0]
	pwr = abs(u);
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <calculateSpeedPID+0xc0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bfb8      	it	lt
 8001068:	425b      	neglt	r3, r3
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <calculateSpeedPID+0xc8>)
 800106c:	6013      	str	r3, [r2, #0]
	if(pwr > 100) pwr = 100;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <calculateSpeedPID+0xc8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	dd02      	ble.n	800107c <calculateSpeedPID+0xa4>
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <calculateSpeedPID+0xc8>)
 8001078:	2264      	movs	r2, #100	; 0x64
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	bd98      	pop	{r3, r4, r7, pc}
 8001080:	20000004 	.word	0x20000004
 8001084:	20000050 	.word	0x20000050
 8001088:	20000048 	.word	0x20000048
 800108c:	2000005c 	.word	0x2000005c
 8001090:	20000008 	.word	0x20000008
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000060 	.word	0x20000060
 800109c:	2000004c 	.word	0x2000004c
 80010a0:	20000058 	.word	0x20000058

080010a4 <ControlMotor>:

void ControlMotor(int ChannelA, int ChannelB){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100-ChannelA);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <ControlMotor+0x2c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100-ChannelB);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <ControlMotor+0x2c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000068 	.word	0x20000068

080010d4 <setMotor>:

void setMotor(int dir , int pwmVal){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
//	pwmVal = 100-pwmVal;
  if (dir == 1){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d103      	bne.n	80010ec <setMotor+0x18>
	  ControlMotor(0, pwmVal);
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff ffdc 	bl	80010a4 <ControlMotor>
  }
  if (dir == -1){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d104      	bne.n	80010fe <setMotor+0x2a>
	  ControlMotor(pwmVal, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff ffd4 	bl	80010a4 <ControlMotor>
  }
  else{
	  ControlMotor(0, 0);
  }
}
 80010fc:	e003      	b.n	8001106 <setMotor+0x32>
	  ControlMotor(0, 0);
 80010fe:	2100      	movs	r1, #0
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ffcf 	bl	80010a4 <ControlMotor>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fb44 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f826 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f962 	bl	80013e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001120:	f000 f868 	bl	80011f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001124:	f000 f8e6 	bl	80012f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001128:	f000 f932 	bl	8001390 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800112c:	2108      	movs	r1, #8
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <main+0x48>)
 8001130:	f001 fb86 	bl	8002840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001134:	210c      	movs	r1, #12
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <main+0x48>)
 8001138:	f001 fb82 	bl	8002840 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <main+0x4c>)
 800113e:	f001 fad5 	bl	80026ec <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  calculateSpeedPID();
 8001142:	f7ff ff49 	bl	8000fd8 <calculateSpeedPID>
	  setMotor(dir, pwr);
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <main+0x50>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <main+0x54>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffbf 	bl	80010d4 <setMotor>
	  calculateSpeedPID();
 8001156:	e7f4      	b.n	8001142 <main+0x32>
 8001158:	20000068 	.word	0x20000068
 800115c:	200000b0 	.word	0x200000b0
 8001160:	2000004c 	.word	0x2000004c
 8001164:	20000058 	.word	0x20000058

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fac6 	bl	8003708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fe31 	bl	8001e18 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011bc:	f000 f98e 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f89e 	bl	800231c <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011e6:	f000 f979 	bl	80014dc <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <MX_TIM2_Init+0xfc>)
 800122e:	2247      	movs	r2, #71	; 0x47
 8001230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_TIM2_Init+0xfc>)
 800123a:	2263      	movs	r2, #99	; 0x63
 800123c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124a:	4829      	ldr	r0, [pc, #164]	; (80012f0 <MX_TIM2_Init+0xfc>)
 800124c:	f001 f9fe 	bl	800264c <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001256:	f000 f941 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001264:	4619      	mov	r1, r3
 8001266:	4822      	ldr	r0, [pc, #136]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001268:	f001 fd52 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 f933 	bl	80014dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001276:	481e      	ldr	r0, [pc, #120]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001278:	f001 fa8a 	bl	8002790 <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 f92b 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4619      	mov	r1, r3
 8001294:	4816      	ldr	r0, [pc, #88]	; (80012f0 <MX_TIM2_Init+0xfc>)
 8001296:	f002 f8c7 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012a0:	f000 f91c 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2208      	movs	r2, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM2_Init+0xfc>)
 80012bc:	f001 fc6a 	bl	8002b94 <HAL_TIM_PWM_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012c6:	f000 f909 	bl	80014dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	220c      	movs	r2, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM2_Init+0xfc>)
 80012d2:	f001 fc5f 	bl	8002b94 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80012dc:	f000 f8fe 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM2_Init+0xfc>)
 80012e2:	f000 f973 	bl	80015cc <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000068 	.word	0x20000068

080012f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM3_Init+0x94>)
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <MX_TIM3_Init+0x98>)
 8001314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM3_Init+0x94>)
 8001318:	2247      	movs	r2, #71	; 0x47
 800131a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM3_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM3_Init+0x94>)
 8001324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM3_Init+0x94>)
 8001338:	f001 f988 	bl	800264c <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 f8cb 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM3_Init+0x94>)
 8001354:	f001 fcdc 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 f8bd 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM3_Init+0x94>)
 8001370:	f002 f85a 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800137a:	f000 f8af 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000b0 	.word	0x200000b0
 800138c:	40000400 	.word	0x40000400

08001390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f002 f89e 	bl	8003508 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f883 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000f8 	.word	0x200000f8
 80013e0:	40013800 	.word	0x40013800

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <MX_GPIO_Init+0xe8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a33      	ldr	r2, [pc, #204]	; (80014cc <MX_GPIO_Init+0xe8>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001416:	f043 0320 	orr.w	r3, r3, #32
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_GPIO_Init+0xe8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_GPIO_Init+0xe8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <MX_GPIO_Init+0xe8>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <MX_GPIO_Init+0xe8>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_GPIO_Init+0xe8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145e:	481c      	ldr	r0, [pc, #112]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001460:	f000 fca9 	bl	8001db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_GPIO_Init+0xec>)
 800147e:	f000 faff 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001482:	2302      	movs	r3, #2
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_GPIO_Init+0xf0>)
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4810      	ldr	r0, [pc, #64]	; (80014d8 <MX_GPIO_Init+0xf4>)
 8001496:	f000 faf3 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480a      	ldr	r0, [pc, #40]	; (80014d8 <MX_GPIO_Init+0xf4>)
 80014b0:	f000 fae6 	bl	8001a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2007      	movs	r0, #7
 80014ba:	f000 faaa 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 fac3 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40011000 	.word	0x40011000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40010c00 	.word	0x40010c00

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d114      	bne.n	8001588 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	201c      	movs	r0, #28
 800157c:	f000 fa49 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001580:	201c      	movs	r0, #28
 8001582:	f000 fa62 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001586:	e018      	b.n	80015ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_TIM_Base_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d113      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_TIM_Base_MspInit+0x78>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	201d      	movs	r0, #29
 80015b0:	f000 fa2f 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015b4:	201d      	movs	r0, #29
 80015b6:	f000 fa48 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40000400 	.word	0x40000400

080015cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d117      	bne.n	800161c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001604:	230c      	movs	r3, #12
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <HAL_TIM_MspPostInit+0x5c>)
 8001618:	f000 fa32 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40010800 	.word	0x40010800

0800162c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_UART_MspInit+0x8c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d131      	bne.n	80016b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x90>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_UART_MspInit+0x90>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x90>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800167c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <HAL_UART_MspInit+0x94>)
 8001692:	f000 f9f5 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0x94>)
 80016ac:	f000 f9e8 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f88f 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001716:	2002      	movs	r0, #2
 8001718:	f000 fb66 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <TIM2_IRQHandler+0x10>)
 8001726:	f001 f92d 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000068 	.word	0x20000068

08001734 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM3_IRQHandler+0x10>)
 800173a:	f001 f923 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000b0 	.word	0x200000b0

08001748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177a:	f7ff ffe5 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f001 ff9f 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7ff fcc5 	bl	8001110 <main>
  bx lr
 8001786:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001790:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 8001794:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001798:	20000140 	.word	0x20000140

0800179c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_2_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_Init+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_Init+0x28>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f923 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	200f      	movs	r0, #15
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fe94 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40022000 	.word	0x40022000

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f93b 	bl	8001a66 <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f903 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000010 	.word	0x20000010
 8001824:	20000018 	.word	0x20000018
 8001828:	20000014 	.word	0x20000014

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x20>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000018 	.word	0x20000018
 800184c:	2000013c 	.word	0x2000013c

08001850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	2000013c 	.word	0x2000013c

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4906      	ldr	r1, [pc, #24]	; (80018fc <__NVIC_EnableIRQ+0x34>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff90 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff2d 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff42 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff90 	bl	8001954 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5f 	bl	8001900 <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff35 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b08b      	sub	sp, #44	; 0x2c
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e169      	b.n	8001d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8158 	bne.w	8001d62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a9a      	ldr	r2, [pc, #616]	; (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d05e      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001abc:	4a98      	ldr	r2, [pc, #608]	; (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d875      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ac2:	4a98      	ldr	r2, [pc, #608]	; (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d058      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ac8:	4a96      	ldr	r2, [pc, #600]	; (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d86f      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ace:	4a96      	ldr	r2, [pc, #600]	; (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d052      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ad4:	4a94      	ldr	r2, [pc, #592]	; (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d869      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ada:	4a94      	ldr	r2, [pc, #592]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d04c      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001ae0:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d863      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001ae6:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d046      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
 8001aec:	4a90      	ldr	r2, [pc, #576]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d85d      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d82a      	bhi.n	8001b4c <HAL_GPIO_Init+0xcc>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d859      	bhi.n	8001bae <HAL_GPIO_Init+0x12e>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <HAL_GPIO_Init+0x80>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b55 	.word	0x08001b55
 8001b08:	08001b67 	.word	0x08001b67
 8001b0c:	08001ba9 	.word	0x08001ba9
 8001b10:	08001baf 	.word	0x08001baf
 8001b14:	08001baf 	.word	0x08001baf
 8001b18:	08001baf 	.word	0x08001baf
 8001b1c:	08001baf 	.word	0x08001baf
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001baf 	.word	0x08001baf
 8001b28:	08001baf 	.word	0x08001baf
 8001b2c:	08001baf 	.word	0x08001baf
 8001b30:	08001baf 	.word	0x08001baf
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001baf 	.word	0x08001baf
 8001b3c:	08001baf 	.word	0x08001baf
 8001b40:	08001baf 	.word	0x08001baf
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	4a79      	ldr	r2, [pc, #484]	; (8001d34 <HAL_GPIO_Init+0x2b4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b52:	e02c      	b.n	8001bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e029      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e024      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e01f      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e01a      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b82:	2304      	movs	r3, #4
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e013      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	611a      	str	r2, [r3, #16]
          break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	615a      	str	r2, [r3, #20]
          break;
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x130>
          break;
 8001bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d801      	bhi.n	8001bba <HAL_GPIO_Init+0x13a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_Init+0x13e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d802      	bhi.n	8001bcc <HAL_GPIO_Init+0x14c>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x152>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3b08      	subs	r3, #8
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	210f      	movs	r1, #15
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80b1 	beq.w	8001d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c18:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x2bc>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a40      	ldr	r2, [pc, #256]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_Init+0x1ec>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1e8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1e4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1e0>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e006      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c60:	2304      	movs	r3, #4
 8001c62:	e004      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_GPIO_Init+0x1ee>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	f002 0203 	and.w	r2, r2, #3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4093      	lsls	r3, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7e:	492f      	ldr	r1, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x2bc>)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	492c      	ldr	r1, [pc, #176]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4928      	ldr	r1, [pc, #160]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4922      	ldr	r1, [pc, #136]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	491e      	ldr	r1, [pc, #120]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4918      	ldr	r1, [pc, #96]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4914      	ldr	r1, [pc, #80]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d021      	beq.n	8001d54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
 8001d1c:	e021      	b.n	8001d62 <HAL_GPIO_Init+0x2e2>
 8001d1e:	bf00      	nop
 8001d20:	10320000 	.word	0x10320000
 8001d24:	10310000 	.word	0x10310000
 8001d28:	10220000 	.word	0x10220000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	10120000 	.word	0x10120000
 8001d34:	10110000 	.word	0x10110000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40011400 	.word	0x40011400
 8001d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	4909      	ldr	r1, [pc, #36]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	3301      	adds	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f47f ae8e 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	372c      	adds	r7, #44	; 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc6:	787b      	ldrb	r3, [r7, #1]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	611a      	str	r2, [r3, #16]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ffd2 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e272      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d00c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e44:	4b8f      	ldr	r3, [pc, #572]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d112      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d10b      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d06c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x12c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d168      	bne.n	8001f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e24c      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x76>
 8001e80:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7f      	ldr	r2, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e02e      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x98>
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b78      	ldr	r3, [pc, #480]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xbc>
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a71      	ldr	r2, [pc, #452]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6e      	ldr	r2, [pc, #440]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a67      	ldr	r2, [pc, #412]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fcac 	bl	8001850 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fca8 	bl	8001850 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e200      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xe4>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fc98 	bl	8001850 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fc94 	bl	8001850 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1ec      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x10c>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1c0      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4939      	ldr	r1, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fc4d 	bl	8001850 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fc49 	bl	8001850 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1a1      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4927      	ldr	r1, [pc, #156]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fc2c 	bl	8001850 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc28 	bl	8001850 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e180      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03a      	beq.n	800209c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_RCC_OscConfig+0x274>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff fc0c 	bl	8001850 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fc08 	bl	8001850 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e160      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f000 fad8 	bl	8002610 <RCC_Delay>
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x274>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff fbf2 	bl	8001850 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206e:	e00f      	b.n	8002090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff fbee 	bl	8001850 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d908      	bls.n	8002090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e146      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	42420000 	.word	0x42420000
 800208c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e9      	bne.n	8002070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a6 	beq.w	80021f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10d      	bne.n	80020d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a87      	ldr	r2, [pc, #540]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b85      	ldr	r3, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7e      	ldr	r2, [pc, #504]	; (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff fbaf 	bl	8001850 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff fbab 	bl	8001850 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e103      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b75      	ldr	r3, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x4c8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x312>
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e02d      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x334>
 8002132:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a69      	ldr	r2, [pc, #420]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b67      	ldr	r3, [pc, #412]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a66      	ldr	r2, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	e01c      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d10c      	bne.n	800216e <HAL_RCC_OscConfig+0x356>
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a60      	ldr	r2, [pc, #384]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e00b      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a5a      	ldr	r2, [pc, #360]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a57      	ldr	r2, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff fb5f 	bl	8001850 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7ff fb5b 	bl	8001850 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0b1      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ee      	beq.n	8002196 <HAL_RCC_OscConfig+0x37e>
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb49 	bl	8001850 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff fb45 	bl	8001850 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e09b      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d061      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d146      	bne.n	80022a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fb19 	bl	8001850 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff fb15 	bl	8001850 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e06d      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4921      	ldr	r1, [pc, #132]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a19      	ldr	r1, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	430b      	orrs	r3, r1
 800226e:	491b      	ldr	r1, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fae9 	bl	8001850 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff fae5 	bl	8001850 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e03d      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x46a>
 80022a0:	e035      	b.n	800230e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fad2 	bl	8001850 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff face 	bl	8001850 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e026      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x498>
 80022ce:	e01e      	b.n	800230e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e019      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x500>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4965      	ldr	r1, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	494d      	ldr	r1, [pc, #308]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d040      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e073      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7ff fa20 	bl	8001850 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff fa1c 	bl	8001850 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e053      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d210      	bcs.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4916      	ldr	r1, [pc, #88]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f97e 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08003740 	.word	0x08003740
 80024e8:	20000010 	.word	0x20000010
 80024ec:	20000014 	.word	0x20000014

080024f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b490      	push	{r4, r7}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_GetSysClockFreq+0xac>)
 80024f8:	1d3c      	adds	r4, r7, #4
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002500:	f240 2301 	movw	r3, #513	; 0x201
 8002504:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x40>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x46>
 800252e:	e02b      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002532:	623b      	str	r3, [r7, #32]
      break;
 8002534:	e02b      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3328      	adds	r3, #40	; 0x28
 8002540:	443b      	add	r3, r7
 8002542:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002546:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	3328      	adds	r3, #40	; 0x28
 800255e:	443b      	add	r3, r7
 8002560:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002564:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800256a:	fb03 f202 	mul.w	r2, r3, r2
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	e004      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	623b      	str	r3, [r7, #32]
      break;
 8002586:	e002      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800258a:	623b      	str	r3, [r7, #32]
      break;
 800258c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258e:	6a3b      	ldr	r3, [r7, #32]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc90      	pop	{r4, r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	08003730 	.word	0x08003730
 80025a0:	40021000 	.word	0x40021000
 80025a4:	007a1200 	.word	0x007a1200
 80025a8:	003d0900 	.word	0x003d0900

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000010 	.word	0x20000010

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08003750 	.word	0x08003750

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffde 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08003750 	.word	0x08003750

08002610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <RCC_Delay+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <RCC_Delay+0x38>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800262c:	bf00      	nop
  }
  while (Delay --);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <RCC_Delay+0x1c>
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000010 	.word	0x20000010
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e041      	b.n	80026e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe ff6a 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 fc28 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e03a      	b.n	800277a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_TIM_Base_Start_IT+0x98>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00e      	beq.n	8002744 <HAL_TIM_Base_Start_IT+0x58>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272e:	d009      	beq.n	8002744 <HAL_TIM_Base_Start_IT+0x58>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_TIM_Base_Start_IT+0x9c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_TIM_Base_Start_IT+0x58>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <HAL_TIM_Base_Start_IT+0xa0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d111      	bne.n	8002768 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b06      	cmp	r3, #6
 8002754:	d010      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002766:	e007      	b.n	8002778 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800

08002790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f839 	bl	800282e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 fb86 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_TIM_PWM_Start+0x24>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e022      	b.n	80028aa <HAL_TIM_PWM_Start+0x6a>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d109      	bne.n	800287e <HAL_TIM_PWM_Start+0x3e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	e015      	b.n	80028aa <HAL_TIM_PWM_Start+0x6a>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d109      	bne.n	8002898 <HAL_TIM_PWM_Start+0x58>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e008      	b.n	80028aa <HAL_TIM_PWM_Start+0x6a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e05e      	b.n	8002970 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0x82>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c0:	e013      	b.n	80028ea <HAL_TIM_PWM_Start+0xaa>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0x92>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d0:	e00b      	b.n	80028ea <HAL_TIM_PWM_Start+0xaa>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Start+0xa2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	e003      	b.n	80028ea <HAL_TIM_PWM_Start+0xaa>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2201      	movs	r2, #1
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fd74 	bl	80033e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_TIM_PWM_Start+0x138>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d107      	bne.n	8002912 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIM_PWM_Start+0x138>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_TIM_PWM_Start+0xfa>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d009      	beq.n	800293a <HAL_TIM_PWM_Start+0xfa>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_TIM_PWM_Start+0x13c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_PWM_Start+0xfa>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_TIM_PWM_Start+0x140>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d010      	beq.n	800296e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	e007      	b.n	800296e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0202 	mvn.w	r2, #2
 80029b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa6f 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa62 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa71 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0204 	mvn.w	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa45 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa38 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa47 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0208 	mvn.w	r2, #8
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fa1b 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa0e 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fa1d 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0210 	mvn.w	r2, #16
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9f1 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f9e4 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f9f3 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0201 	mvn.w	r2, #1
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe f984 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fce1 	bl	80034f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f9b7 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0220 	mvn.w	r2, #32
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fcac 	bl	80034e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0ac      	b.n	8002d08 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	f200 809f 	bhi.w	8002cfc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002cfd 	.word	0x08002cfd
 8002bcc:	08002cfd 	.word	0x08002cfd
 8002bd0:	08002cfd 	.word	0x08002cfd
 8002bd4:	08002c39 	.word	0x08002c39
 8002bd8:	08002cfd 	.word	0x08002cfd
 8002bdc:	08002cfd 	.word	0x08002cfd
 8002be0:	08002cfd 	.word	0x08002cfd
 8002be4:	08002c7b 	.word	0x08002c7b
 8002be8:	08002cfd 	.word	0x08002cfd
 8002bec:	08002cfd 	.word	0x08002cfd
 8002bf0:	08002cfd 	.word	0x08002cfd
 8002bf4:	08002cbb 	.word	0x08002cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f9d0 	bl	8002fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]
      break;
 8002c36:	e062      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa16 	bl	8003070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e041      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fa5f 	bl	8003144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0204 	bic.w	r2, r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      break;
 8002cb8:	e021      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 faa9 	bl	8003218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      break;
 8002cfa:	e000      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_TIM_ConfigClockSource+0x18>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0b3      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x180>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d60:	d03e      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0xd0>
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	f200 8087 	bhi.w	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	f000 8085 	beq.w	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	d87f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d78:	2b70      	cmp	r3, #112	; 0x70
 8002d7a:	d01a      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0xa2>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d87b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b60      	cmp	r3, #96	; 0x60
 8002d82:	d050      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x116>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d877      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b50      	cmp	r3, #80	; 0x50
 8002d8a:	d03c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xf6>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d873      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d058      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x136>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d86f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	d064      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002d9c:	2b30      	cmp	r3, #48	; 0x30
 8002d9e:	d86b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d060      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d867      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05c      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d05a      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002db0:	e062      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f000 faee 	bl	80033a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
      break;
 8002dde:	e04e      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f000 fad7 	bl	80033a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e02:	609a      	str	r2, [r3, #8]
      break;
 8002e04:	e03b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 fa4e 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2150      	movs	r1, #80	; 0x50
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 faa5 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002e24:	e02b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 fa6c 	bl	8003310 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2160      	movs	r1, #96	; 0x60
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa95 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002e44:	e01b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fa2e 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2140      	movs	r1, #64	; 0x40
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fa85 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f000 fa7c 	bl	800336e <TIM_ITRx_SetConfig>
        break;
 8002e76:	e002      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d007      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <TIM_Base_SetConfig+0xbc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x30>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <TIM_Base_SetConfig+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <TIM_Base_SetConfig+0xbc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <TIM_Base_SetConfig+0xc0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <TIM_Base_SetConfig+0xb8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	; (800306c <TIM_OC1_SetConfig+0xc8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0308 	bic.w	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <TIM_OC1_SetConfig+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00

08003070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0210 	bic.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0320 	bic.w	r3, r3, #32
 80030ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <TIM_OC2_SetConfig+0xd0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10d      	bne.n	80030ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <TIM_OC2_SetConfig+0xd0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d113      	bne.n	800311c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	40012c00 	.word	0x40012c00

08003144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800318c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_OC3_SetConfig+0xd0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10d      	bne.n	80031be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <TIM_OC3_SetConfig+0xd0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d113      	bne.n	80031ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	621a      	str	r2, [r3, #32]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40012c00 	.word	0x40012c00

08003218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	031b      	lsls	r3, r3, #12
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <TIM_OC4_SetConfig+0x98>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d109      	bne.n	800328c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40012c00 	.word	0x40012c00

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0210 	bic.w	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	031b      	lsls	r3, r3, #12
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	f043 0307 	orr.w	r3, r3, #7
 8003390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	609a      	str	r2, [r3, #8]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2201      	movs	r2, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e046      	b.n	80034ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d009      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10c      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800

080034e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe f87c 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f829 	bl	80035a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035de:	f023 030c 	bic.w	r3, r3, #12
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2c      	ldr	r2, [pc, #176]	; (80036b8 <UART_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe ffec 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	e002      	b.n	800361a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe ffd4 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <UART_SetConfig+0x118>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	0119      	lsls	r1, r3, #4
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009a      	lsls	r2, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <UART_SetConfig+0x118>)
 8003652:	fba3 0302 	umull	r0, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2064      	movs	r0, #100	; 0x64
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <UART_SetConfig+0x118>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	4419      	add	r1, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <UART_SetConfig+0x118>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	440a      	add	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40013800 	.word	0x40013800
 80036bc:	51eb851f 	.word	0x51eb851f

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	2600      	movs	r6, #0
 80036c4:	4d0c      	ldr	r5, [pc, #48]	; (80036f8 <__libc_init_array+0x38>)
 80036c6:	4c0d      	ldr	r4, [pc, #52]	; (80036fc <__libc_init_array+0x3c>)
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	f000 f822 	bl	8003718 <_init>
 80036d4:	2600      	movs	r6, #0
 80036d6:	4d0a      	ldr	r5, [pc, #40]	; (8003700 <__libc_init_array+0x40>)
 80036d8:	4c0a      	ldr	r4, [pc, #40]	; (8003704 <__libc_init_array+0x44>)
 80036da:	1b64      	subs	r4, r4, r5
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08003758 	.word	0x08003758
 80036fc:	08003758 	.word	0x08003758
 8003700:	08003758 	.word	0x08003758
 8003704:	0800375c 	.word	0x0800375c

08003708 <memset>:
 8003708:	4603      	mov	r3, r0
 800370a:	4402      	add	r2, r0
 800370c:	4293      	cmp	r3, r2
 800370e:	d100      	bne.n	8003712 <memset+0xa>
 8003710:	4770      	bx	lr
 8003712:	f803 1b01 	strb.w	r1, [r3], #1
 8003716:	e7f9      	b.n	800370c <memset+0x4>

08003718 <_init>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr
